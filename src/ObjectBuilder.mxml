<?xml version="1.0" encoding="utf-8"?>
<!--
Copyright (c) 2015 Object Builder <https://github.com/Mignari/ObjectBuilder>

Permission is hereby granted, free of charge, to any person obtaining a copy
of this software and associated documentation files (the "Software"), to deal
in the Software without restriction, including without limitation the rights
to use, copy, modify, merge, publish, distribute, sublicense, and/or sell
copies of the Software, and to permit persons to whom the Software is
furnished to do so, subject to the following conditions:

The above copyright notice and this permission notice shall be included in
all copies or substantial portions of the Software.

THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR
IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,
FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE
AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER
LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,
OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN
THE SOFTWARE.
-->

<s:WindowedApplication xmlns:fx="http://ns.adobe.com/mxml/2009"
                       xmlns:s="library://ns.adobe.com/flex/spark"
                       xmlns:mx="library://ns.adobe.com/flex/mx"
                       xmlns:nail="library://ns.nail.com/naillib"
                       xmlns:otlib="otlib.components.*"
                       xmlns:ob="ob.components.*"
                       xmlns:menu="ob.menu.*"
                       implements="ob.core.IObjectBuilder"
                       minWidth="800"
                       minHeight="600"
                       fontSize="11"
                       showStatusBar="false"
                       visible="false"
                       backgroundColor="0x494949"
                       invoke="applicationInvokeHandler(event)"
                       preinitialize="applicationPreinitializeHandler(event)"
                       creationComplete="creationCompleteHandler(event)"
                       applicationComplete="applicationCompleteHandler(event)"
                       closing="applicationClosingHandler(event)">
    
    <fx:Style source="../assets/styles/object_builder.css"/>
    
    <fx:Metadata>
        [ResourceBundle("strings")]
    </fx:Metadata>
    
    <fx:Script>
        <![CDATA[
            import flash.net.registerClassAlias;
            
            import mx.core.UIComponent;
            import mx.events.CloseEvent;
            import mx.events.FlexEvent;
            import mx.logging.ILogger;
            import mx.logging.LogEventLevel;
            import mx.managers.DragManager;
            import mx.resources.ResourceManager;
            
            import spark.events.IndexChangeEvent;
            
            import air.update.ApplicationUpdaterUI;
            import air.update.events.UpdateEvent;
            
            import nail.commands.Command;
            import nail.commands.Communicator;
            import nail.commands.ICommunicator;
            import nail.commands.LogCommand;
            import nail.components.controls.Alert;
            import nail.core.nail_internal;
            import nail.errors.NullArgumentError;
            import nail.events.MenuEvent;
            import nail.loaders.BitmapLoader;
            import nail.logging.Log;
            import nail.logging.LogFileTarget;
            import nail.managers.PopUpWindowManager;
            import nail.utils.Descriptor;
            import nail.utils.DialogDetail;
            import nail.utils.FileData;
            import nail.utils.FileQueueHelper;
            import nail.utils.FileUtil;
            import nail.utils.PathUtil;
            import nail.utils.StringUtil;
            import nail.utils.WindowUtil;
            import nail.utils.isNullOrEmpty;
            
            import ob.animationeditor.AnimationEditor;
            import ob.commands.CompileProjectAsCommand;
            import ob.commands.CompileProjectCommand;
            import ob.commands.CreateNewProjectCommand;
            import ob.commands.HideProgressBarCommand;
            import ob.commands.LoadProjectCommand;
            import ob.commands.LoadVersionsCommand;
            import ob.commands.NeedToReloadCommand;
            import ob.commands.ProgressBarID;
            import ob.commands.ProgressCommand;
            import ob.commands.SetClientInfoCommand;
            import ob.commands.SettingsCommand;
            import ob.commands.ShowProgressBarCommand;
            import ob.commands.UnloadProjectCommand;
            import ob.commands.sprites.ExportSpritesCommand;
            import ob.commands.sprites.GetSpriteListCommand;
            import ob.commands.sprites.ImportSpritesFromFileCommand;
            import ob.commands.sprites.NewSpriteCommand;
            import ob.commands.sprites.RemoveSpritesCommand;
            import ob.commands.sprites.ReplaceSpritesCommand;
            import ob.commands.sprites.ReplaceSpritesFromFilesCommand;
            import ob.commands.sprites.SetSpriteListCommand;
            import ob.commands.things.DuplicateThingCommand;
            import ob.commands.things.ExportThingCommand;
            import ob.commands.things.GetThingDataCommand;
            import ob.commands.things.GetThingListCommand;
            import ob.commands.things.ImportThingsFromFilesCommand;
            import ob.commands.things.NewThingCommand;
            import ob.commands.things.RemoveThingCommand;
            import ob.commands.things.ReplaceThingsFromFilesCommand;
            import ob.commands.things.SetThingDataCommand;
            import ob.commands.things.SetThingListCommand;
            import ob.commands.things.UpdateThingCommand;
            import ob.components.AboutWindow;
            import ob.components.CompileProjectWindow;
            import ob.components.ErrorWindow;
            import ob.components.ExportWindow;
            import ob.components.NewProjectWindow;
            import ob.components.OpenProjectWindow;
            import ob.components.PreferencesWindow;
            import ob.components.SplashScreen;
            import ob.components.SpritesOptimizerWindow;
            import ob.components.VersionsWindow;
            import ob.settings.ObjectBuilderSettings;
            import ob.utils.ObUtils;
            
            import otlib.assets.Assets;
            import otlib.components.DatSprProgressBar;
            import otlib.components.DefaultProgressBar;
            import otlib.components.FindWindow;
            import otlib.components.LogWindow;
            import otlib.components.LookGenerator;
            import otlib.components.renders.ThingListRenderer;
            import otlib.core.IVersionStorage;
            import otlib.core.Version;
            import otlib.core.VersionStorage;
            import otlib.events.StorageEvent;
            import otlib.events.ThingEditorEvent;
            import otlib.geom.Size;
            import otlib.loaders.PathHelper;
            import otlib.obd.OBDVersions;
            import otlib.resources.Resources;
            import otlib.settings.ISettingsManager;
            import otlib.settings.SettingsManager;
            import otlib.sprites.SpriteData;
            import otlib.things.Animator;
            import otlib.things.FrameDuration;
            import otlib.things.ThingCategory;
            import otlib.things.ThingData;
            import otlib.things.ThingProperty;
            import otlib.things.ThingType;
            import otlib.utils.ClientInfo;
            import otlib.utils.OTFormat;
            import otlib.utils.SpriteUtils;
            import otlib.utils.ThingListItem;
            
            import ov.ObjectViewer;
            
            import slicer.Slicer;
            
            use namespace nail_internal;
            
            //--------------------------------------------------------------------------
            // PROPERTIES
            //--------------------------------------------------------------------------
            
            [Embed(source="../workerswfs/ob/core/ObjectBuilderWorker.swf", mimeType="application/octet-stream")]
            public const ObjectBuilderWorker:Class;
            
            private var m_creationComplete:Boolean;
            private var m_invokeArgs:Array;
            private var m_communicator:ICommunicator;
            private var m_logger:ILogger;
            private var m_logTarget:LogFileTarget;
            private var m_splashScreen:SplashScreen;
            private var m_settingsManager:ISettingsManager;
            private var m_settings:ObjectBuilderSettings;
            private var m_updater:ApplicationUpdaterUI = new ApplicationUpdaterUI();
            private var m_versionStorage:IVersionStorage;
            private var m_thingData:ThingData;
            private var m_nextThingData:ThingData;
            private var m_thingDataChanged:Boolean;
            private var m_filesName:String;
            private var m_selectThingIndex:int;
            private var m_logText:String = "";
            private var m_logWindow:LogWindow;
            private var m_findThingWindow:FindWindow;
            private var m_lookGenerator:LookGenerator;
            private var m_animationWindow:AnimationEditor;
            private var m_autosave:Boolean;
            private var m_autosaveChanged:Boolean;
            private var m_showPreviewPanel:Boolean = true;
            private var m_showThingsPanel:Boolean = true;
            private var m_showSpritesPanel:Boolean = true;
            private var m_showPanelChanged:Boolean;
            private var m_datSprProgressBar:DatSprProgressBar;
            private var m_defaultProgressBar:DefaultProgressBar;
            private var m_category:String;
            private var m_categoryChanged:Boolean;
            private var m_objectViewer:ObjectViewer;
            private var m_slicer:Slicer;
            private var m_clientInfo:ClientInfo;
            private var m_version:Version;
            private var m_extendedEnabled:Boolean;
            private var m_transparencyEnabled:Boolean;
            private var m_clientChanged:Boolean;
            private var m_clientIsTemporary:Boolean;
            private var m_clientLoaded:Boolean;
            
            //--------------------------------------
            // Getters / Setters 
            //--------------------------------------
            
            public function get worker():Worker { return m_communicator.worker; }
            public function get running():Boolean { return m_communicator.running; }
            public function get background():Boolean { return m_communicator.background; }
            public function get applicationDescriptor():XML { return m_communicator.applicationDescriptor; }
            public function get settingsManager():ISettingsManager { return m_settingsManager; }
            public function get settings():ObjectBuilderSettings { return m_settings; }
            public function get versionStorage():IVersionStorage { return m_versionStorage; }
            
            public function get version():Version { return m_version; }
            public function get clientInfo():ClientInfo { return m_clientInfo; }
            public function get clientExtendedEnabled():Boolean { return m_extendedEnabled; }
            public function get clientTransparencyEnabled():Boolean { return m_transparencyEnabled; }
            public function get clientChanged():Boolean { return m_clientChanged; }
            public function get clientIsTemporary():Boolean { return m_clientIsTemporary; }
            public function get clientLoaded():Boolean { return m_clientLoaded; }
            
            public function get thingData():ThingData { return m_thingData; }
            public function set thingData(value:ThingData):void
            {
                if (m_thingData != value) {
                    m_nextThingData = value;
                    m_thingDataChanged = true;
                    invalidateProperties();
                }
            }
            
            public function get showPreviewPanel():Boolean { return m_showPreviewPanel; }
            public function set showPreviewPanel(value:Boolean):void
            {
                if (m_showPreviewPanel != value) {
                    m_showPreviewPanel = value;
                    m_showPanelChanged = true;
                    invalidateProperties();
                }
            }
            
            public function get showThingsPanel():Boolean { return m_showThingsPanel; }
            public function set showThingsPanel(value:Boolean):void
            {
                if (m_showThingsPanel != value) {
                    m_showThingsPanel = value;
                    m_showPanelChanged = true;
                    invalidateProperties();
                }
            }
            
            public function get showSpritesPanel():Boolean { return m_showSpritesPanel; }
            public function set showSpritesPanel(value:Boolean):void
            {
                if (m_showSpritesPanel != value) {
                    m_showSpritesPanel = value;
                    m_showPanelChanged = true;
                    invalidateProperties();
                }
            }
            
            public function get currentCategory():String { return m_category; }
            public function set currentCategory(value:String):void
            {
                if (m_category != value) {
                    m_category = value;
                    m_categoryChanged = true;
                    invalidateProperties();
                }
            }
            
            //--------------------------------------------------------------------------
            // METHODS
            //--------------------------------------------------------------------------
            
            //--------------------------------------
            // Public
            //--------------------------------------
            
            public function registerCallback(commandClass:Class, callback:Function):void
            {
                m_communicator.registerCallback(commandClass, callback);
            }
            
            public function unregisterCallback(commandClass:Class, callback:Function):void
            {
                m_communicator.unregisterCallback(commandClass, callback);
            }
            
            public function sendCommand(command:Command):void
            {
                m_communicator.sendCommand(command);
            }
            
            public function start():void
            {
                //unused
            }
            
            public function createNewProject():void
            {
                var window:NewProjectWindow = new NewProjectWindow();
                window.extended = m_settings.extended;
                window.transparency = m_settings.transparency;
                window.improvedAnimations = m_settings.improvedAnimations;
                window.addEventListener(Event.CLOSE, windowCloseHandler);
                window.open();
                
                PopUpWindowManager.addWindow(window);
                
                function windowCloseHandler(event:Event):void
                {
                    if (window.detail == DialogDetail.CONFIRM) {
                        // TODO: check if it's changed/compiled
                        
                        sendCommand(new CreateNewProjectCommand(window.version.datSignature,
                                                               window.version.sprSignature,
                                                               window.extended,
                                                               window.transparency,
                                                               window.improvedAnimations));
                    }
                }
            }
            
            public function openProject(directory:File = null):void
            {
                var window:OpenProjectWindow;
                if (PopUpWindowManager.currentWindow is OpenProjectWindow) {
                    window = OpenProjectWindow(PopUpWindowManager.currentWindow);
                    window.activate();
                    WindowUtil.centralizeWindowOnScreen(window);
                } else {
                    window = new OpenProjectWindow();
                    window.addEventListener(Event.CLOSE, windowCloseHandler);
                    window.open();
                    PopUpWindowManager.addWindow(window);
                }
                
                window.clientDirectory = (directory || m_settings.getClientDirectory());
                window.extended = (m_settings.extended || m_settings.extendedAlwaysSelected);
                window.transparency = (m_settings.transparency || m_settings.transparencyAlwaysSelected);
                window.improvedAnimations = (m_settings.improvedAnimations || m_settings.improvedAnimationsAlwaysSelected);
                
                function windowCloseHandler(event:Event):void
                {
                    if (window.detail == DialogDetail.CONFIRM) {
                        m_settings.datSignature = window.version.datSignature;
                        m_settings.sprSignature = window.version.sprSignature;
                        m_settings.datPath = window.datFile.nativePath;
                        m_settings.sprPath = window.sprFile.nativePath;
                        m_settings.extended = window.extended;
                        m_settings.transparency = window.transparency;
                        m_settings.improvedAnimations = window.improvedAnimations;
                        m_filesName = FileUtil.getName(window.datFile);
                        
                        sendCommand(new LoadProjectCommand(window.datFile,
                                                           window.sprFile,
                                                           window.version.datSignature,
                                                           window.version.sprSignature,
                                                           window.extended,
                                                           window.transparency,
                                                           window.improvedAnimations));
                    }
                }
            }
            
            public function compileProject():void
            {
                if (!clientLoaded) return;
                
                if (clientIsTemporary) {
                    compileProjectAs();
                    return;
                }
                
                if (m_settings.autosaveThingChanges)
                    saveThingChanges();
                
                sendCommand(new CompileProjectCommand());
            }
            
            public function compileProjectAs():void
            {
                if (!this.clientLoaded) return;
                
                var window:CompileProjectWindow = new CompileProjectWindow();
                window.directory = m_settings.getClientDirectory();
                window.version = m_versionStorage.getBySignatures(m_clientInfo.datSignature, m_clientInfo.sprSignature);
                window.extended = m_clientInfo.extended;
                window.transparency = m_clientInfo.transparency;
                window.improvedAnimations = m_clientInfo.improvedAnimations;
                window.filesName = isNullOrEmpty(m_filesName) ? "Tibia" : m_filesName;
                window.addEventListener(Event.CLOSE, windowCloseHandler);
                window.open();
                
                PopUpWindowManager.addWindow(window);
                
                function windowCloseHandler(event:Event):void
                {
                    if (window.detail == DialogDetail.CONFIRM) {
                        m_settings.datSignature = window.version.datSignature;
                        m_settings.sprSignature = window.version.sprSignature;
                        m_settings.datPath = window.datFile.nativePath;
                        m_settings.sprPath = window.sprFile.nativePath;
                        m_settings.extended = window.extended;
                        m_settings.transparency = window.transparency;
                        m_settings.improvedAnimations = window.improvedAnimations;
                        
                        if (m_settings.autosaveThingChanges)
                            saveThingChanges();
                        
                        sendCommand(new CompileProjectAsCommand(window.datFile,
                                                         window.sprFile,
                                                         window.version.datSignature,
                                                         window.version.sprSignature,
                                                         window.extended,
                                                         window.transparency,
                                                         window.improvedAnimations));
                    }
                }
            }
            
            public function unloadProject():void
            {
                if (clientLoaded) {
                    clear();
                    sendCommand(new UnloadProjectCommand());
                }
            }
            
            public function openPreferencesWindow():void
            {
                var window:PreferencesWindow = new PreferencesWindow();
                window.settings = m_settings;
                window.addEventListener(Event.CLOSE, closeHandler);
                window.open();
                
                PopUpWindowManager.addWindow(window);
                
                function closeHandler(event:Event):void
                {
                    if (window.detail == DialogDetail.CONFIRM) {
                        thingStepper.amount = m_settings.objectsListAmount;
                        spriteStepper.amount = m_settings.spritesListAmount;
                        sendCommand(new SettingsCommand(m_settings));
                    }
                }
            }
            
            public function openFinder():void
            {
                if (!m_findThingWindow) {
                    m_findThingWindow = new FindWindow();
                    m_findThingWindow.width = m_settings.findWindowWidth;
                    m_findThingWindow.height = m_settings.findWindowHeight;
                    m_findThingWindow.addEventListener(Event.CLOSE, closeHandler);
                    m_findThingWindow.open();
                    WindowUtil.centralizeWindowOnScreen(m_findThingWindow);
                } else
                    m_findThingWindow.activate();
                
                function closeHandler(event:Event):void
                {
                    m_settings.findWindowWidth = m_findThingWindow.width;
                    m_settings.findWindowHeight = m_findThingWindow.height;
                    m_findThingWindow.removeEventListener(Event.CLOSE, closeHandler);
                    m_findThingWindow = null;
                }
            }
            
            public function closeFinder():void
            {
                if (m_findThingWindow && !m_findThingWindow.closed)
                    m_findThingWindow.close();
            }
            
            public function openObjectViewer(file:File = null):void
            {
                if (!m_objectViewer) {
                    m_objectViewer = new ObjectViewer();
                    m_objectViewer.addEventListener(Event.CLOSE, closeHandler);
                    m_objectViewer.open();
                } else
                    m_objectViewer.activate();
                
                m_objectViewer.file = file;
                
                function closeHandler(event:Event):void
                {
                    m_objectViewer.removeEventListener(Event.CLOSE, closeHandler);
                    m_objectViewer = null;
                }
            }
            
            public function closeObjectViewer():void
            {
                if (m_objectViewer && !m_objectViewer.closed)
                    m_objectViewer.close();
            }
            
            public function openSlicer(file:File = null):void
            {
                if (file && !FileUtil.hasBitmapFormat(file)) return;
                
                if (!m_slicer) {
                    m_slicer = new Slicer();
                    m_slicer.addEventListener(Event.CLOSE, closeHandler);
                    m_slicer.open();
                } else
                    m_slicer.activate();
                
                m_slicer.file = file;
                
                function closeHandler(event:Event):void
                {
                    m_slicer.removeEventListener(Event.CLOSE, closeHandler);
                    m_slicer = null;
                }
            }
            
            public function closeSlicer():void
            {
                if (m_slicer && !m_slicer.closed)
                    m_slicer.close();
            }
            
            public function openAnimationEditor():void
            {
                if (!m_animationWindow) {
                    m_animationWindow = new AnimationEditor();
                    m_animationWindow.addEventListener(Event.CLOSE, closeHandler);
                    m_animationWindow.open();
                } else
                    m_animationWindow.activate();
                
                function closeHandler(event:Event):void
                {
                    m_animationWindow.removeEventListener(Event.CLOSE, closeHandler);
                    m_animationWindow = null;
                }
            }
            
            public function closeAnimationEditor():void
            {
                if (m_animationWindow && !m_animationWindow.closed)
                    m_animationWindow.close();
            }
            
            public function openSpritesOptimizer():void
            {
                if (!clientLoaded) return;
                
                var window:SpritesOptimizerWindow = new SpritesOptimizerWindow();
                window.open();
                PopUpWindowManager.addWindow(window);
            }
            
            public function openVersionsWindow(datSignature:uint = 0, sprSignature:uint = 0):void
            {
                var window:VersionsWindow = new VersionsWindow();
                window.datSignature = datSignature;
                window.sprSignature = sprSignature;
                window.addEventListener(Event.CLOSING, windowClosingHandler);
                window.open();
                
                if (m_settings.versionsWindowMaximized)
                    window.maximize();
                else {
                    window.width = m_settings.versionsWindowWidth;
                    window.height = m_settings.versionsWindowHeight;
                    WindowUtil.centralizeWindowOnScreen(window);
                }
                
                function windowClosingHandler(event:Event):void
                {
                    window.removeEventListener(Event.CLOSING, windowClosingHandler);
                    m_settings.versionsWindowMaximized = (window.nativeWindow.displayState == NativeWindowDisplayState.MAXIMIZED);
                }
            }
            
            public function openLogWindow():void
            {
                if (!m_logWindow) {
                    m_logWindow = new LogWindow();
                    m_logWindow.text = m_logText;
                    m_logWindow.addEventListener(Event.CLEAR, clearHandler);
                    m_logWindow.addEventListener(Event.CLOSE, closeHandler);
                    m_logWindow.open();
                    WindowUtil.centralizeWindowOnScreen(m_logWindow);
                } else
                    m_logWindow.activate();
                
                function clearHandler(event:Event):void
                {
                    m_logWindow.text = m_logText = "";
                }
                
                function closeHandler(event:Event):void
                {
                    m_logWindow.removeEventListener(Event.CLEAR, clearHandler);
                    m_logWindow.removeEventListener(Event.CLOSE, closeHandler);
                    m_logWindow = null;
                }
            }
            
            public function closeLogWindow():void
            {
                if (m_logWindow && !m_logWindow.closed)
                    m_logWindow.close();
            }
            
            public function exportThings(fileDataList:Vector.<FileData>,
                                         category:String,
                                         obdVersion:uint,
                                         clientVersion:Version,
                                         exportObjectProperties:Boolean,
                                         transparentBackground:Boolean,
                                         jpegQuality:uint):void
            {
                if (!this.clientLoaded || !fileDataList || fileDataList.length == 0 || isNullOrEmpty(category) || !clientVersion) return;
                var length:uint = fileDataList.length;
                var list:Vector.<PathHelper> = new Vector.<PathHelper>(length, true);
                for (var i:uint = 0; i < length; i++) {
                    list[i] = new PathHelper(fileDataList[i].nativePath, fileDataList[i].data as uint);
                }
                sendCommand(new ExportThingCommand(list, category, obdVersion, clientVersion.datSignature, clientVersion.sprSignature, exportObjectProperties, transparentBackground, jpegQuality));
            }
            
            public function exportSprites(fileDataList:Vector.<FileData>,
                                          transparentBackground:Boolean,
                                          jpegQuality:uint):void
            {
                if (!this.clientLoaded || !fileDataList || fileDataList.length == 0) return;
                var length:uint = fileDataList.length;
                var list:Vector.<PathHelper> = new Vector.<PathHelper>(length, true);
                for (var i:uint = 0; i < length; i++) {
                    list[i] = new PathHelper(fileDataList[i].nativePath, fileDataList[i].data as uint);
                }
                sendCommand(new ExportSpritesCommand(list, transparentBackground, jpegQuality));
            }
            
            public function replaceSprite(id:uint, bitmap:BitmapData):void
            {
                if (!this.clientLoaded || id == 0 || !bitmap) return;
                var spriteData:SpriteData = SpriteData.createSpriteData(id, bitmap.getPixels(bitmap.rect));
                sendCommand(new ReplaceSpritesCommand(Vector.<SpriteData>([spriteData])));
            }
            
            public function removeSpritesIds(sprites:Vector.<uint>):void
            {
                if (!this.clientLoaded || !sprites || sprites.length == 0) return;
                sprites.sort(Array.NUMERIC | Array.DESCENDING);
                sendCommand(new RemoveSpritesCommand(sprites));
            }
            
            public function removeSprites(sprites:Vector.<SpriteData>):void
            {
                if (!this.clientLoaded || !sprites || sprites.length == 0) return;
                var length:uint = sprites.length;
                var list:Vector.<uint> = new Vector.<uint>(length, true);
                for (var i:uint = 0; i < length; i++) {
                    list[i] = sprites[i].id;
                }
                list.sort(Array.NUMERIC | Array.DESCENDING);
                sendCommand(new RemoveSpritesCommand(list));
            }
            
            public function appendLog(text:String):void
            {
                if (text) {
                    m_logText += "→ " + text + "<br/>"; 
                    if (m_logWindow) {
                        m_logWindow.text = m_logText;
                    }
                }
            }
            
            public function saveThingChanges():void
            {
                if (this.clientLoaded && this.thingData && this.thingTypeEditor.changed) {
                    if (this.thingTypeEditor.saveChanges())
                        sendCommand(new UpdateThingCommand(thingTypeEditor.thingData, true));
                }
            }
            
            public function checkForUpdates():void
            {
                m_updater.updateURL = "https://dl.dropboxusercontent.com/s/ersqqbih5xyqy7e/update.xml";
                m_updater.addEventListener(UpdateEvent.INITIALIZED, updateInitializedHandler);
                m_updater.addEventListener(ErrorEvent.ERROR, updateErrorHandler);
                m_updater.isCheckForUpdateVisible = true;
                m_updater.isFileUpdateVisible = true;
                m_updater.isInstallUpdateVisible = true;
                m_updater.initialize();
            }
            
            public function clear():void
            {
                m_thingData = null;
                m_thingDataChanged = false;
                m_clientInfo = null;
                m_nextThingData = null;
                m_selectThingIndex = -1;
                
                thingList.removeAll();
                spritesList.removeAll();
                
                editThing(null);
                thingView.thingData = null;
                infoPanel.clear();
                categoryDropDownList.selectedIndex = 0;
                thingStepper.value = 0;
                m_logText = "";
            }
            
            //--------------------------------------
            // Override Public
            //--------------------------------------
            
            public function register():void
            {
                // Register classes.
                registerClassAlias("Animator", Animator);
                registerClassAlias("ByteArray", ByteArray);
                registerClassAlias("ClientInfo", ClientInfo);
                registerClassAlias("FrameDuration", FrameDuration);
                registerClassAlias("ObjectBuilderSettings", ObjectBuilderSettings);
                registerClassAlias("PathHelper", PathHelper);
                registerClassAlias("SpriteData", SpriteData);
                registerClassAlias("ThingData", ThingData);
                registerClassAlias("ThingListItem", ThingListItem);
                registerClassAlias("ThingProperty", ThingProperty);
                registerClassAlias("ThingType", ThingType);
                
                registerCallback(LogCommand, onLog);
                registerCallback(ProgressCommand, onProgress);
                registerCallback(ShowProgressBarCommand, onShowProgressBar);
                registerCallback(HideProgressBarCommand, onHideProgressBar);
                registerCallback(SetClientInfoCommand, onSetClientInfo);
                
                registerCallback(SetThingDataCommand, onSetThingData);
                registerCallback(SetThingListCommand, onSetThingList);
                registerCallback(SetSpriteListCommand, onSetSpriteList);
                registerCallback(NeedToReloadCommand, onNeedToReload);
            }
            
            //--------------------------------------
            // Override Protected
            //--------------------------------------
            
            override protected function commitProperties():void
            {
                super.commitProperties();
                
                if (m_thingDataChanged) {
                    setThingData(m_nextThingData);
                    m_nextThingData = null;
                    m_thingDataChanged = false;
                }
                
                if (m_autosaveChanged) {
                    m_settings.autosaveThingChanges = m_autosave;
                    m_autosaveChanged = false;
                }
                
                if (m_showPanelChanged) {
                    previewPanel.visible = m_showPreviewPanel;
                    previewPanel.includeInLayout = m_showPreviewPanel;
                    thingsPanel.visible = m_showThingsPanel;
                    thingsPanel.includeInLayout = m_showThingsPanel;
                    spritesPanel.visible = m_showSpritesPanel;
                    spritesPanel.includeInLayout = m_showSpritesPanel;
                    showThingsPanelButton.selected = m_showThingsPanel;
                    m_showPanelChanged = false;
                }
                
                if (m_categoryChanged) {
                    onSetCategory(m_category);
                    m_categoryChanged = false;
                }
            }
            
            //--------------------------------------
            // Private
            //--------------------------------------
            
            private function applicationLoadComplete():void
            {
                visible = true;
                activate();
                
                if (m_settings.maximized)
                    this.maximize();
                else
                    WindowUtil.centralizeWindowOnScreen(this);
                
                previewPanel.width = Math.max(previewPanel.minWidth, m_settings.previewContainerWidth);
                thingsPanel.width = Math.max(thingsPanel.minWidth, m_settings.thingListContainerWidth);
                spritesPanel.width = Math.max(spritesPanel.minWidth, m_settings.spritesContainerWidth);
                showPreviewPanel = m_settings.showPreviewPanel;
                showThingsPanel = m_settings.showThingsPanel;
                showSpritesPanel = m_settings.showSpritesPanel;
                thingStepper.amount = m_settings.objectsListAmount;
                spriteStepper.amount = m_settings.spritesListAmount;
                
                if (m_invokeArgs) {
                    setInvokeArgs(m_invokeArgs);
                    m_invokeArgs = null;
                } else if (m_settings.loadFilesOnStartup)
                    autoLoadProject();
                
                m_creationComplete = true;
            }
            
            private function setInvokeArgs(args:Array):void
            {
                if (args) {
                    var path:String = args[0];
                    if (!isNullOrEmpty(path)) {
                        var file:File = new File(path);
                        if (file.extension == OTFormat.DAT || file.extension == OTFormat.SPR)
                            openProject(FileUtil.getDirectory(file));
                        else if (file.extension == OTFormat.OBD)
                            openObjectViewer(file);
                    }
                }
            }
            
            private function createLogging():void 
            {
                m_logTarget = new LogFileTarget();
                m_logTarget.filters = ["*"];
                m_logTarget.level = LogEventLevel.ALL;
                m_logTarget.includeDate = true;
                m_logTarget.includeTime = true;
                m_logTarget.includeLevel = true;
                
                mx.logging.Log.addTarget(m_logTarget);
            }
            
            private function createWorker():void
            {
                var workerBytesClass:ByteArray = new ObjectBuilderWorker() as ByteArray;
                m_communicator = new Communicator(workerBytesClass);
                m_communicator.start();
            }
            
            private function createSplashScreen():void
            {
                m_splashScreen = new SplashScreen();
                m_splashScreen.addEventListener(Event.CLOSE, closeHandler);
                m_splashScreen.open();
                
                function closeHandler(event:Event):void
                {
                    applicationLoadComplete();
                    m_splashScreen.removeEventListener(Event.CLOSE, closeHandler);
                    m_splashScreen = null;
                }
            }
            
            private function loadSettings():void
            {
                m_splashScreen.setProgress(1, 2);
                m_settings = new ObjectBuilderSettings();
                
                if (!m_settingsManager.loadSettings(m_settings) ||
                    m_settings.settingsApplicationVersion != Descriptor.getVersionNumber()) {
                    firstRun();
                }
                
                Resources.locale = m_settings.getLanguage()[0];
                this.resourceManager.localeChain = m_settings.getLanguage();
                
                sendCommand(new SettingsCommand(m_settings));
                
                m_splashScreen.status = resourceManager.getString("strings", "loadingSettings") + "...";
            }
            
            private function saveSettings():void
            {
                m_settings.maximized = (nativeWindow.displayState == NativeWindowDisplayState.MAXIMIZED);
                m_settingsManager.saveSettings(m_settings);
            }
            
            private function loadVersions():void
            {
                var file:File = File.applicationStorageDirectory.resolvePath("versions.xml");
                m_versionStorage.load(file);
                sendCommand(new LoadVersionsCommand(file));
            }
            
            private function saveVersions():void
            {
                m_versionStorage.save();
            }
            
            private function firstRun():void
            {
                // Sets as default application for supported extensions.
                nativeApplication.setAsDefaultApplication("obd");
                nativeApplication.setAsDefaultApplication("dat");
                nativeApplication.setAsDefaultApplication("spr");
                
                // Copy the firstRun folder to application storage.
                var directory:File = File.applicationDirectory.resolvePath("firstRun");
                if (!directory) return;
                
                try
                {
                    FileUtil.copyInto(directory, File.applicationStorageDirectory);
                } catch(error:Error) {
                    Log.error(error.getStackTrace());
                }
                
                // Clear the application log
                m_logTarget.clear();
            }
            
            private function onSetClientInfo(info:ClientInfo):void
            {
                if (!info)
                    throw new NullArgumentError("info");
                
                m_clientInfo = info;
                m_version = m_versionStorage.getBySignatures(info.datSignature, info.sprSignature);
                m_extendedEnabled = info.extended;
                m_transparencyEnabled = info.transparency;
                m_clientChanged = info.changed;
                m_clientIsTemporary = info.isTemporary;
                m_clientLoaded = info.loaded;
                
                infoPanel.setFilesInfo(info);
                thingTypeEditor.filesInfo = info;
                
                thingStepper.minimum = getMinThingId();
                thingStepper.maximum = getMaxThingId();
                spriteStepper.minimum = info.minSpriteId;
                spriteStepper.maximum = info.maxSpriteId;
            }
            
            private function onSetThingData(thingData:ThingData):void
            {
                if (!thingData)
                    throw new NullArgumentError("thingData");
                
                this.thingData = thingData;
            }
            
            private function onSetThingList(selectedIds:Vector.<uint>, things:Vector.<ThingListItem>):void
            {
                if (!selectedIds)
                    throw new NullArgumentError("selectedIds");
                
                if (!things)
                    throw new NullArgumentError("things");
                
                thingList.rememberScroll();
                thingList.setListObjects(things);
                thingList.ensureIdIsVisible(selectedIds[0]);
                thingList.selectedIds = selectedIds;
            }
            
            private function onSetSpriteList(selectedIds:Vector.<uint>, sprites:Vector.<SpriteData>):void
            {
                if (!selectedIds)
                    throw new NullArgumentError("selectedIds");
                
                if (!sprites)
                    throw new NullArgumentError("sprites");
                
                spritesList.rememberScroll();
                spritesList.setListObjects(sprites);
                spritesList.ensureIdIsVisible(selectedIds[0]);
                spritesList.selectedIds = selectedIds;
            }
            
            private function onNeedToReload(extended:Boolean, transparency:Boolean, improvedAnimations:Boolean):void
            {
                Alert.show(resourceManager.getString("strings", "needToReload"),
                           resourceManager.getString("strings", "warning"),
                           Alert.YES | Alert.NO,
                           this,
                           alertCloseHandler);
                
                function alertCloseHandler(event:CloseEvent):void
                {
                    if (event.detail == Alert.YES)
                        sendCommand(new NeedToReloadCommand(extended, transparency, improvedAnimations));
                }
            }
            
            private function onExportThingData(prefix:String,
                                               format:String,
                                               directory:File,
                                               clientVersion:Version,
                                               obdVersion:uint,
                                               things:Vector.<ThingType>,
                                               category:String,
                                               exportObjectProperties:Boolean,
                                               transparentBackground:Boolean,
                                               jpegQuality:uint):void
            {
                var queue:FileQueueHelper = new FileQueueHelper();
                queue.parent = this;
                queue.addEventListener(Event.COMPLETE, completeHandler);
                var changeName:Boolean = (prefix.indexOf("_") == -1);
                
                var length:uint = things.length;
                for (var i:uint = 0; i < length; i++) {
                    var id:uint = things[i].id;
                    var name:String = !changeName ? prefix : (name = prefix + "_" + id);
                    queue.addFile(id, name, format, directory);
                }
                queue.start();
                
                function completeHandler(event:Event):void
                {
                    if (queue.result && queue.result.length > 0)
                        exportThings(queue.result, category, obdVersion, clientVersion, exportObjectProperties, transparentBackground, jpegQuality);
                }
            }
            
            private function onExportSprites(prefix:String,
                                             format:String,
                                             directory:File,
                                             sprites:Vector.<SpriteData>,
                                             transparentBackground:Boolean,
                                             jpegQuality:uint):void
            {
                var queue:FileQueueHelper = new FileQueueHelper();
                queue.parent = this;
                queue.addEventListener(Event.COMPLETE, completeHandler);
                var changeName:Boolean = (prefix.indexOf("_") == -1);
                
                var length:uint = sprites.length;
                for (var i:uint = 0; i < length; i++) {
                    var id:uint = sprites[i].id;
                    var name:String = !changeName ? prefix : (name = prefix + "_" + id);
                    queue.addFile(id, name, format, directory);
                }
                queue.start();
                
                function completeHandler(event:Event):void
                {
                    if (queue.result && queue.result.length > 0)
                        exportSprites(queue.result, transparentBackground, jpegQuality);
                }
            }
            
            private function selectSprite(id:uint):void
            {
                // Return if id is current selected.
                if (!this.clientLoaded || this.spritesList.selectedId == id)  return;
                
                // Search index if id is in range of loaded list.
                if (id >= spritesList.minId && id <= spritesList.maxId) {
                    spritesList.ensureIdIsVisible(id);
                    spritesList.selectedId = id;
                } else {
                    // Request new list by target id.
                    sendCommand(new GetSpriteListCommand(id));
                }
            }
            
            private function onCopySprite():void
            {
                if (!this.clientLoaded) return;
                
                var data:SpriteData = spritesList.selectedSprite;
                if (data) {
                    var bitmap:BitmapData = data.getBitmap(0xFFFF00FF);
                    Clipboard.generalClipboard.clear();
                    Clipboard.generalClipboard.setData(ClipboardFormats.BITMAP_FORMAT, bitmap);
                }
            }
            
            private function onPasteSprite():void
            {
                if (!this.clientLoaded) return;
                
                if (Clipboard.generalClipboard.hasFormat(ClipboardFormats.BITMAP_FORMAT)) {
                    var bitmap:BitmapData = BitmapData(Clipboard.generalClipboard.getData(ClipboardFormats.BITMAP_FORMAT));
                    bitmap = SpriteUtils.removeMagenta(bitmap);
                    if (bitmap.width == 32 && bitmap.height == 32) {
                        if (!spritesList.multipleSelected && spritesList.selectedId != 0) {
                            var pixels:ByteArray = bitmap.getPixels(bitmap.rect);
                            var spriteData:SpriteData = SpriteData.createSpriteData(spritesList.selectedId, pixels);
                            sendCommand(new ReplaceSpritesCommand(Vector.<SpriteData>([spriteData])));
                        }
                    }
                }
            }
            
            private function openLookGenerator():void
            {
                if (!m_lookGenerator) {
                    m_lookGenerator = new LookGenerator();
                    m_lookGenerator.open();
                    WindowUtil.centralizeWindowOnScreen(m_lookGenerator);
                } else
                    m_lookGenerator.activate();
            }
            
            private function closeLookGenerator():void
            {
                if (m_lookGenerator && !m_lookGenerator.closed) {
                    m_lookGenerator.close();
                    m_lookGenerator = null;
                }
            }
            
            private function openHelpWindow():void
            {
                var options:NativeWindowInitOptions = new NativeWindowInitOptions();
                var screenBounds:Rectangle = Screen.mainScreen.bounds;
                var bounds:Rectangle = new Rectangle(0, 0, 550, 600);
                bounds.x = (screenBounds.width - bounds.width) * 0.5;
                bounds.y = (screenBounds.height - bounds.height) * 0.5;
                var html:HTMLLoader = HTMLLoader.createRootWindow(true, options, true, bounds);
                html.load(new URLRequest(File.applicationDirectory.resolvePath("help/help.html").url));
            }
            
            private function onAboutApplication():void
            {
                var window:AboutWindow = new AboutWindow();
                window.open();
                PopUpWindowManager.addWindow(window);
            }
            
            private function editThing(data:ThingData):void
            {
                thingTypeEditor.thingData = data;
                thingTypeEditor.visible = (data != null);
                confirmButton.enabled = thingTypeEditor.changed;
                cancelButton.enabled = (data != null);
            }
            
            private function getMinThingId():uint
            {
                if (this.clientLoaded) {
                    switch (this.currentCategory)
                    {
                        case ThingCategory.ITEM:
                            return m_clientInfo.minItemId;
                            
                        case ThingCategory.OUTFIT:
                            return m_clientInfo.minOutfitId;
                            
                        case ThingCategory.EFFECT:
                            return m_clientInfo.minEffectId;
                            
                        case ThingCategory.MISSILE:
                            return m_clientInfo.minMissileId;
                    }
                }
                return 0;
            }
            
            private function getMaxThingId():uint
            {
                if (this.clientLoaded) {
                    switch(currentCategory)
                    {
                        case ThingCategory.ITEM:
                            return m_clientInfo.maxItemId;
                            
                        case ThingCategory.OUTFIT:
                            return m_clientInfo.maxOutfitId;
                            
                        case ThingCategory.EFFECT:
                            return m_clientInfo.maxEffectId;
                            
                        case ThingCategory.MISSILE:
                            return m_clientInfo.maxMissileId;
                    }
                }
                return 0;
            }
            
            private function setThingData(thingData:ThingData):void
            {
                m_thingData = thingData;
                thingView.thingData = thingData;
                
                if (thingData) {
                    if (thingData.category == ThingCategory.OUTFIT) {
                        thingView.patternX = 2;
                        thingView.drawBlendLayer = false;
                    } else {
                        thingView.patternX = 0;
                        thingView.drawBlendLayer = true;
                    }
                    
                    thingView.play();
                    
                    this.currentCategory = thingData.category;
                    
                    var id:uint = thingData.id;
                    thingStepper.minimum = getMinThingId();
                    thingStepper.maximum = getMaxThingId();
                    thingStepper.value = id;
                    
                    if (thingTypeEditor.thingData && thingTypeEditor.thingData.id == id)
                        thingTypeEditor.thingData = thingData;
                    
                    // set index if id is in range of loaded thing list.
                    if (id >= thingList.minId && id <= thingList.maxId) {
                        thingList.ensureIdIsVisible(id);
                        thingList.selectedId = id;
                    } else {
                        // request new thing list by target id.
                        sendCommand(new GetThingListCommand(id, thingData.category));
                    }
                }
            }
            
            private function saveWindowState():void
            {
                m_settings.previewContainerWidth = previewPanel.width;
                m_settings.thingListContainerWidth = thingsPanel.width;
                m_settings.spritesContainerWidth = spritesPanel.width;
                m_settings.showPreviewPanel = showPreviewPanel;
                m_settings.showThingsPanel = showThingsPanel;
                m_settings.showSpritesPanel = showSpritesPanel;
            }
            
            private function showDatSprProgressBar(title:String):void
            {
                if (!m_datSprProgressBar) {
                    m_datSprProgressBar = new DatSprProgressBar();
                    m_datSprProgressBar.title = title;
                }
                m_datSprProgressBar.open();
            }
            
            private function hideDatSprProgressBar():void
            {
                if (m_datSprProgressBar) {
                    m_datSprProgressBar.close();
                    m_datSprProgressBar = null;
                }
            }
            
            private function showDefaultProgressBar(title:String):void
            {
                if (!m_defaultProgressBar) {
                    m_defaultProgressBar = new DefaultProgressBar();
                    m_defaultProgressBar.title = title;
                }
                m_defaultProgressBar.open();
            }
            
            private function hideDefaultProgressBar():void
            {
                if (m_defaultProgressBar) {
                    m_defaultProgressBar.close();
                    m_defaultProgressBar = null;
                }
            }
            
            private function onShowProgressBar(id:uint, title:String):void
            {
                switch(id)
                {
                    case ProgressBarID.DAT_SPR:
                        this.showDatSprProgressBar(title);
                        break;
                    
                    case ProgressBarID.DEFAULT:
                        this.showDefaultProgressBar(title);
                        break;
                }
            }
            
            private function onHideProgressBar(id:uint):void
            {
                switch(id)
                {
                    case ProgressBarID.DAT_SPR:
                        this.hideDatSprProgressBar();
                        break;
                    
                    case ProgressBarID.DEFAULT:
                        this.hideDefaultProgressBar();
                        break;
                }
            }
            
            private function onLog(level:uint, message:String, stack:String, id:uint):void
            {
                this.hideDatSprProgressBar();
                this.hideDefaultProgressBar();
                
                if (level != Log.INFO) {
                    var text:String = isNullOrEmpty(stack) ? message : stack;
                    m_logTarget.write(text);
                    openErrorWindow(text);
                }
                else
                    this.appendLog(message);
            }
            
            private function onProgress(id:uint, loaded:uint, total:uint, label:String):void
            {
                switch(id)
                {
                    case ProgressBarID.DAT:
                    case ProgressBarID.SPR:
                        if (m_datSprProgressBar) m_datSprProgressBar.setProgress(id, loaded, total);
                        break;
                    
                    case ProgressBarID.DEFAULT:
                        if (m_defaultProgressBar) m_defaultProgressBar.setProgress(loaded, total);
                        break;
                }
            }
            
            private function toLogString(level:uint):String
            {
                switch(level)
                {
                    case Log.DEBUG:
                        return resourceManager.getString("strings", "debug");
                        
                    case Log.INFO:
                        return resourceManager.getString("strings", "info");
                        
                    case Log.WARN:
                        return resourceManager.getString("strings", "warn");
                        
                    case Log.ERROR:
                        return resourceManager.getString("strings", "error");
                        
                    case Log.FATAL:
                        return resourceManager.getString("strings", "fatal");
                }
                return "";
            }
            
            private function onSetCategory(category:String):void
            {
                if (this.clientLoaded) {
                    switch(category)
                    {
                        case ThingCategory.ITEM:
                            categoryDropDownList.selectedIndex = 0;
                            break;
                        
                        case ThingCategory.OUTFIT:
                            categoryDropDownList.selectedIndex = 1;
                            break;
                        
                        case ThingCategory.EFFECT:
                            categoryDropDownList.selectedIndex = 2;
                            break;
                        
                        case ThingCategory.MISSILE:
                            categoryDropDownList.selectedIndex = 3;
                            break;
                    }
                    
                    thingStepper.minimum = getMinThingId();
                    thingStepper.maximum = getMaxThingId();
                    thingStepper.value = thingStepper.minimum;
                    objectListGroupBox.label = resourceManager.getString("strings", category+"s");
                    sendCommand(new GetThingDataCommand(thingStepper.minimum, category));
                    sendCommand(new GetThingListCommand(thingStepper.minimum, category));
                }
            }
            
            private function updateTitle(info:String = "", saved:Boolean = true):void
            {
                var text:String = Descriptor.getName();
                
                if (!isNullOrEmpty(info))
                    text += " - " + info;
                
                if (!saved)
                    text += "*";
                
                this.title = text;
            }
            
            private function openErrorWindow(message:String):void
            {
                if (!PopUpWindowManager.currentWindow) {
                    var window:ErrorWindow = new ErrorWindow();
                    //window.addEventListener(Event.CLOSE, function(event:Event):void { exit(); });
                    window.open();
                    window.message = message;
                    PopUpWindowManager.addWindow(window);
                } else if (PopUpWindowManager.currentWindow is ErrorWindow)
                    ErrorWindow(PopUpWindowManager.currentWindow).appendMessage(message);
            }
            
            private function autoLoadProject():void
            {
                var version:Version = m_versionStorage.getBySignatures(m_settings.datSignature, m_settings.sprSignature);
                if (version) {
                    var datFile:File = PathUtil.toFile(m_settings.datPath);
                    var sprFile:File = PathUtil.toFile(m_settings.sprPath);
                    if (datFile && sprFile)
                        sendCommand(new LoadProjectCommand(datFile,
                                                           sprFile,
                                                           version.datSignature,
                                                           version.sprSignature,
                                                           m_settings.extended,
                                                           m_settings.transparency,
                                                           m_settings.improvedAnimations));
                }
            }
            
            //--------------------------------------
            // Event Handlers
            //--------------------------------------
            
            protected function applicationInvokeHandler(event:InvokeEvent):void
            {
                if (event.arguments && event.arguments.length > 0) {
                    if (m_creationComplete)
                        this.setInvokeArgs(event.arguments);
                    else
                        m_invokeArgs = event.arguments;
                }
            }
            
            protected function applicationPreinitializeHandler(event:FlexEvent):void
            {
                Resources.manager = ResourceManager.getInstance();
                
                m_logger = mx.logging.Log.getLogger("ObjectBuilder");
                m_settingsManager = SettingsManager.getInstance();
                m_versionStorage = VersionStorage.getInstance();
                m_versionStorage.addEventListener(StorageEvent.COMPILE, versionStorageCompileHandler);
                m_category = ThingCategory.ITEM;
                
                createLogging();
                createWorker();
                register();
                createSplashScreen();
            }
            
            protected function creationCompleteHandler(event:FlexEvent):void
            {
                loadSettings();
                loadVersions();
                
                m_logTarget.writeStart();
            }
            
            protected function applicationCompleteHandler(event:FlexEvent):void
            {
                m_splashScreen.setProgress(2, 2);
            }
            
            protected function applicationClosingHandler(event:Event):void
            {
                this.closeLogWindow();
                this.closeFinder();
                this.closeLookGenerator();
                this.closeObjectViewer();
                this.closeSlicer();
                this.closeAnimationEditor();
                this.saveWindowState();
                this.saveSettings();
                this.saveVersions();
                
                m_logTarget.writeEnd();
                
                if (this.clientLoaded && this.clientChanged) {
                    event.preventDefault();
                    Alert.show(resourceManager.getString("strings", "wantToCompile"),
                               "",
                               Alert.YES | Alert.NO | Alert.CANCEL,
                               this,
                               alertCloseHandler,
                               null,
                               Alert.YES);
                }
                
                function alertCloseHandler(event:CloseEvent):void
                {
                    if (event.detail == Alert.YES)
                        compileProject();
                    else if (event.detail == Alert.NO)
                        exit();
                }
            }
            
            protected function confirmButtonClickHandler(event:MouseEvent):void
            {
                if (thingTypeEditor.changed) {
                    if (thingTypeEditor.saveChanges()) {
                        var thingData:ThingData = thingTypeEditor.thingData;
                        if (thingData.sprites[0].id == uint.MAX_VALUE) {
                            Alert.show(resourceManager.getString("strings", "wantToReplaceSprites"),
                                       "",
                                       Alert.YES | Alert.NO,
                                       this,
                                       closeHandler,
                                       null,
                                       Alert.NO);
                            return;
                        }
                        
                        sendCommand(new UpdateThingCommand(thingData, false));
                    }
                }
                
                function closeHandler(event:CloseEvent):void
                {
                    sendCommand(new UpdateThingCommand(thingTypeEditor.thingData, (event.detail == Alert.YES)));
                }
            }
            
            protected function cancelButtonClickHandler(event:MouseEvent):void
            {
                editThing(null);
            }
            
            protected function thingListChangeHandler(event:IndexChangeEvent):void
            {
                if (this.clientLoaded) {
                    if (thingList.selectedId != 0)
                        sendCommand(new GetThingDataCommand(thingList.selectedId, this.currentCategory));
                    
                    editThingButton.enabled = !thingList.multipleSelected;
                }
            }
            
            protected function categoryDropDownListChangeHandler(event:IndexChangeEvent):void
            {
                switch(event.newIndex)
                {
                    case 0:
                        this.currentCategory = ThingCategory.ITEM;
                        break;
                    
                    case 1:
                        this.currentCategory = ThingCategory.OUTFIT;
                        break;
                    
                    case 2:
                        this.currentCategory = ThingCategory.EFFECT;
                        break;
                    
                    case 3:
                        this.currentCategory = ThingCategory.MISSILE;
                        break;
                }
            }
            
            protected function thingChangedHandler(event:ThingEditorEvent):void
            {
                var title:String = "";
                if (event.data)
                    title = ObUtils.toLocale(event.data.category) + " " + event.data.id;
                
                updateTitle(title);
                confirmButton.enabled = false;
            }
            
            protected function thingPropertyChangedHandler(event:ThingEditorEvent):void
            {
                var title:String = "";
                if (event.data)
                    title = ObUtils.toLocale(event.data.category) + " " + event.data.id;
                
                updateTitle(title, !thingTypeEditor.changed);
                confirmButton.enabled = thingTypeEditor.changed;
                
                if (event.property) {
                    var message:String = resourceManager.getString("strings", "propertyChanged");
                    this.appendLog(StringUtil.format(message,
                                   ObUtils.toLocale(event.data.category),
                                   event.data.id,
                                   event.property,
                                   event.oldValue,
                                   event.newValue));
                }
            }
            
            protected function thingSpriteDoubleClickHandler(event:ThingEditorEvent):void
            {
                selectSprite(event.sprite);
            }
            
            protected function thingStepperChangeHandler(event:Event):void
            {
                if (this.clientLoaded && this.thingData)
                    sendCommand(new GetThingDataCommand(thingStepper.value, this.currentCategory));
            }
            
            protected function replaceThingHandler(event:Event):void
            {
                if (!this.clientLoaded) return;
                
                var filter:FileFilter = new FileFilter("Object Builder Data", "*.obd;");
                var file:File = m_settings.getIODirectory();
                file.addEventListener(FileListEvent.SELECT_MULTIPLE, selectMultipleHandler);
                file.browseForOpenMultiple(resourceManager.getString("strings", "selectFiles"), [filter]);
                
                function selectMultipleHandler(event:FileListEvent):void
                {
                    var selectedIds:Vector.<uint> = thingList.selectedIds;
                    var files:Array = event.files;
                    var length:uint = files.length;
                    var list:Vector.<PathHelper> = new Vector.<PathHelper>(length, true);
                    
                    if (selectedIds.length != files.length) {
                        Alert.show(resourceManager.getString(
                                   "strings",
                                   "invalidFileAmount",
                                   [resourceManager.getString("strings", "objects").toLowerCase()]),
                                   resourceManager.getString("strings", "error"));
                        return;
                    }
                    
                    if (files.length > 1)
                        FileUtil.sortFiles(files, Array.NUMERIC | Array.DESCENDING);
                    
                    for (var i:uint = 0; i < length; i++)
                        list[i] = new PathHelper(files[i].nativePath, selectedIds[i]);
                    
                    if (list.length != 0)
                        sendCommand(new ReplaceThingsFromFilesCommand(list));
                }
            }
            
            protected function importThingHandler(event:Event):void
            {
                if (!this.clientLoaded) return;
                
                var filter:FileFilter = new FileFilter("Object Builder Data", "*.obd;");
                var file:File = m_settings.getIODirectory();
                file.addEventListener(FileListEvent.SELECT_MULTIPLE, selectMultipleHandler);
                file.browseForOpenMultiple(resourceManager.getString("strings", "selectFiles"), [filter]);
                
                function selectMultipleHandler(event:FileListEvent):void
                {
                    var selectedIds:Vector.<uint> = thingList.selectedIds;
                    var files:Array = event.files;
                    var length:uint = files.length;
                    var list:Vector.<PathHelper> = new Vector.<PathHelper>(length, true);
                    
                    if (files.length > 1)
                        FileUtil.sortFiles(files, Array.NUMERIC);
                    
                    for (var i:uint = 0; i < length; i++)
                        list[i] = new PathHelper(files[i].nativePath, i);
                    
                    if (list.length != 0)
                        sendCommand(new ImportThingsFromFilesCommand(list));
                }
            }
            
            protected function exportThingHandler(event:Event):void
            {
                if (!this.clientLoaded) return;
                
                var things:Vector.<ThingType> = thingList.selectedThings;
                if (things.length == 0) return;
                
                var version:Version = m_settings.getExportThingVersion();
                if (!version)
                    version = m_versionStorage.getBySignatures(m_clientInfo.datSignature, m_clientInfo.sprSignature);
                
                var window:ExportWindow = new ExportWindow();
                window.obdFormatEnabled = true;
                window.prefix = this.currentCategory;
                window.directory = m_settings.getIODirectory();
                window.format = m_settings.getExportThingFormat();
                window.clientVersion = version;
                window.obdVersion = m_settings.exportOBDVersion;
                window.transparentBackground = m_settings.exportWithTransparentBackground;
                window.jpegQuality = m_settings.jpegQuality;
                window.addEventListener(Event.CLOSE, windowCloseHandler);
                window.open();
                
                PopUpWindowManager.addWindow(window);
                
                function windowCloseHandler(event:Event):void
                {
                    if (window.detail == DialogDetail.CONFIRM) {
                        m_settings.setIODirectory(window.directory);
                        m_settings.setExportThingFormat(window.format);
                        m_settings.setExportThingVersion(window.clientVersion);
                        m_settings.exportOBDVersion = window.obdVersion;
                        m_settings.exportWithTransparentBackground = window.transparentBackground;
                        m_settings.jpegQuality = window.jpegQuality;
                        
                        onExportThingData(window.prefix,
                                          window.format,
                                          window.directory,
                                          window.clientVersion,
                                          window.obdVersion,
                                          things,
                                          thingData.category,
                                          m_settings.exportObjectProperties,
                                          m_settings.exportWithTransparentBackground,
                                          m_settings.jpegQuality);
                    }
                }
            }
            
            protected function duplicateThingHandler(event:Event):void
            {
                if (!this.clientLoaded) return;
                var things:Vector.<uint> = thingList.selectedIds;
                if (things && things.length > 0)
                    sendCommand(new DuplicateThingCommand(things, currentCategory));
            }
            
            protected function editThingHandler(event:Event):void
            {
                if (!this.clientLoaded || thingTypeEditor.thingData == this.thingData) return;
                
                if (m_settings.autosaveThingChanges)
                    this.saveThingChanges();
                
                if (thingTypeEditor.thingData != null && thingTypeEditor.changed) {
                    var message:String = resourceManager.getString(
                        "strings",
                        "saveChanges",
                        [ObUtils.toLocale(thingTypeEditor.thingData.category),
                            thingTypeEditor.thingData.id]);
                    
                    Alert.show(message,
                               resourceManager.getString("strings", "save"),
                               Alert.YES | Alert.NO | Alert.CANCEL,
                               this,
                               closeHandler,
                               null,
                               Alert.CANCEL);
                    return;
                }
                
                editThing(thingData);
                
                function closeHandler(event:CloseEvent):void
                {
                    if (event.detail == Alert.YES) {
                        saveThingChanges();
                    } else if (event.detail == Alert.NO) {
                        appendLog(StringUtil.format(resourceManager.getString("strings", "unsavedChanges"),
                            ObUtils.toLocale(thingTypeEditor.thingData.category),
                            thingTypeEditor.thingData.id));
                    } else if (event.detail == Alert.CANCEL) {
                        return;
                    }
                    
                    editThing(thingData);
                }
            }
            
            protected function newThingHandler(event:Event):void
            {
                if (this.clientLoaded) {
                    if (this.currentCategory)
                        sendCommand(new NewThingCommand(this.currentCategory));
                }
            }
            
            protected function removeThingHandler(event:Event):void
            {
                if (this.clientLoaded) {
                    var selectedIds:Vector.<uint> = thingList.selectedIds;
                    if (selectedIds && selectedIds.length > 0)
                        sendCommand(new RemoveThingCommand(selectedIds, this.currentCategory, false));
                }
            }
            
            protected function thingListDoubleClickHandler(event:MouseEvent):void
            {
                if (event.target is ThingListRenderer)
                    editThingHandler(event);
            }
            
            protected function thingDataNativeDragEnterHandler(event:NativeDragEvent):void
            {
                if (clientLoaded && event.target === thingViewGroup || event.target === thingList) {
                    if (event.clipboard.hasFormat(ClipboardFormats.FILE_LIST_FORMAT)) {
                        NativeDragManager.dropAction = NativeDragActions.LINK;
                        DragManager.acceptDragDrop(UIComponent(event.target));
                    }
                }
            }
            
            protected function thingDataNativeDragDropHandler(event:NativeDragEvent):void
            {
                if (!this.clientLoaded) return;
                
                var clipboard:Clipboard = event.clipboard;
                if (clipboard.hasFormat(ClipboardFormats.FILE_LIST_FORMAT)) {
                    var dropfiles:Array = clipboard.getData(ClipboardFormats.FILE_LIST_FORMAT) as Array;
                    var length:uint = dropfiles.length;
                    var list:Vector.<PathHelper> = new Vector.<PathHelper>();
                    
                    for (var i:uint = 0; i < length; i++) {
                        var file:File = dropfiles[i];
                        if (file.extension == OTFormat.OBD)
                            list[list.length] = new PathHelper(file.nativePath, i);
                    }
                    
                    if (list.length > 0)
                        sendCommand(new ImportThingsFromFilesCommand(list));
                }
            }
            
            protected function thingEditorDragEnterHandler(event:NativeDragEvent):void
            {
                if (clientLoaded && event.target === thingTypeEditor.buttonsContainer) {
                    if (event.clipboard.hasFormat(ClipboardFormats.FILE_LIST_FORMAT)) {
                        NativeDragManager.dropAction = NativeDragActions.LINK;
                        DragManager.acceptDragDrop(thingTypeEditor.buttonsContainer);
                    }
                }
            }
            
            protected function thingEditorDragDropHandler(event:NativeDragEvent):void
            {
                if (!this.clientLoaded) return;
                
                var clipboard:Clipboard = event.clipboard;
                if (clipboard.hasFormat(ClipboardFormats.FILE_LIST_FORMAT)) {
                    var file:File = clipboard.getData(ClipboardFormats.FILE_LIST_FORMAT)[0];
                    if (FileUtil.hasBitmapFormat(file)) {
                        var loader:BitmapLoader = new BitmapLoader();
                        loader.addEventListener(Event.COMPLETE, loadCompleteHandler);
                        loader.load(file);
                    }
                }
                
                function loadCompleteHandler(event:Event):void
                {
                    var bitmap:BitmapData = event.target.bitmap;
                    var thing:ThingType = thingTypeEditor.getThingTypeResult();
                    var size:Size = thing.getSpriteSheetSize();
                    
                    if (bitmap.width == size.width && size.height == bitmap.height) {
                        var length:uint = thing.spriteIDs.length;
                        var sprites:Vector.<SpriteData> = new Vector.<SpriteData>(length, true);
                        for (var i:uint = 0; i < length; i++)
                            sprites[i] = SpriteData.createSpriteData(thing.spriteIDs[i]);
                        
                        var data:ThingData = ThingData.create(OBDVersions.OBD_VERSION_2, m_version.value, thing, sprites);
                        data.setSpriteSheet(bitmap);
                        thingTypeEditor.thingData = data;
                        confirmButton.enabled = true;
                        thingTypeEditor.invalidateThingData();
                    } else {
                        var message:String = resourceManager.getString("strings", "invalidSpriteSheetSize");
                        Alert.show(StringUtil.format(message, size.width, size.height),
                                   resourceManager.getString("strings", "invalidSpriteSheetSizeTitle"));
                    }
                }
            }
            
            protected function replaceSpriteHandler(event:Event):void
            {
                if (!this.clientLoaded) return;
                
                var filters:Array = ObUtils.createImagesFileFilter();
                var file:File = m_settings.getIODirectory();
                file.addEventListener(FileListEvent.SELECT_MULTIPLE, multipleSelectHandler);
                file.browseForOpenMultiple(resourceManager.getString("strings", "selectImages"), filters);
                
                function multipleSelectHandler(event:FileListEvent):void
                {
                    var selectedIds:Vector.<uint> = spritesList.selectedIds;
                    var files:Array = event.files;
                    var length:uint = files.length;
                    
                    if (length > 0)
                        m_settings.setIODirectory(files[0]);
                    
                    if (selectedIds.length != files.length) {
                        Alert.show(resourceManager.getString(
                                   "strings",
                                   "invalidFileAmount",
                                   [resourceManager.getString("strings", "sprites").toLowerCase()]),
                                   resourceManager.getString("strings", "error"));
                        return;
                    }
                    
                    if (length > 1)
                        FileUtil.sortFiles(files, Array.NUMERIC | Array.DESCENDING);
                    
                    var list:Vector.<PathHelper> = new Vector.<PathHelper>(length, true);
                    for (var i:uint = 0; i < length; i++)
                        list[i] = new PathHelper(files[i].nativePath, selectedIds[i]);
                    
                    if (length != 0)
                        sendCommand(new ReplaceSpritesFromFilesCommand(list));
                }
            }
            
            protected function importSpriteHandler(event:MouseEvent):void
            {
                if (!this.clientLoaded) return;
                
                var filters:Array = ObUtils.createImagesFileFilter();
                var file:File = m_settings.getIODirectory();
                file.addEventListener(FileListEvent.SELECT_MULTIPLE, multipleSelectHandler);
                file.browseForOpenMultiple(resourceManager.getString("strings", "selectImages"), filters);
                
                function multipleSelectHandler(event:FileListEvent):void
                {
                    var files:Array = event.files;
                    var length:uint = files.length;
                    var list:Vector.<PathHelper> = new Vector.<PathHelper>(length, true);
                    
                    if (length > 0) {
                        m_settings.setIODirectory(files[0]);
                        FileUtil.sortFiles(files, Array.NUMERIC | Array.DESCENDING);
                    }
                    
                    for (var i:uint = 0; i < length; i++)
                        list[i] = new PathHelper(files[i].nativePath, i);
                    
                    if (length != 0)
                        sendCommand(new ImportSpritesFromFileCommand(list));
                }
            }
            
            protected function exportSpriteHandler(event:Event):void
            {
                if (!this.clientLoaded) return;
                
                var sprites:Vector.<SpriteData> = spritesList.selectedSprites;
                if (sprites.length == 0) return;
                
                var window:ExportWindow = new ExportWindow();
                window.obdFormatEnabled = false;
                window.prefix = "sprite";
                window.format = m_settings.getExportSpriteFormat();
                window.directory = m_settings.getIODirectory();
                window.transparentBackground = m_settings.exportWithTransparentBackground;
                window.jpegQuality = m_settings.jpegQuality;
                window.addEventListener(Event.CLOSE, windowCloseHandler);
                window.open();
                
                PopUpWindowManager.addWindow(window);
                
                function windowCloseHandler(event:Event):void
                {
                    if (window.detail == DialogDetail.CONFIRM) {
                        m_settings.setIODirectory(window.directory);
                        m_settings.setExportSpriteFormat(window.format);
                        m_settings.exportWithTransparentBackground = window.transparentBackground;
                        m_settings.jpegQuality = window.jpegQuality;
                        
                        onExportSprites(window.prefix,
                                        window.format,
                                        window.directory,
                                        sprites,
                                        m_settings.exportWithTransparentBackground,
                                        m_settings.jpegQuality);
                    }
                }
            }
            
            protected function newSpriteButtonClickHandler(event:MouseEvent):void
            {
                if (this.clientLoaded)
                    sendCommand(new NewSpriteCommand());
            }
            
            protected function removeSpriteHandler(event:Event):void
            {
                this.removeSpritesIds(spritesList.selectedIds);
            }
            
            protected function spritesListChangeHandler(event:IndexChangeEvent):void
            {
                if (this.clientLoaded) {
                    spriteStepper.value = this.spritesList.selectedId;
                    var enable:Boolean = !spritesList.multipleSelected;
                    copySpriteButton.enabled = enable;
                    pasteSpriteButton.enabled = enable;
                }
            }
            
            protected function spriteStepperChangeHandler(event:Event):void
            {
                if (this.clientLoaded)
                    selectSprite(spriteStepper.value);
            }
            
            protected function spritesListNativeDragEnterHandler(event:NativeDragEvent):void
            {
                if (clientLoaded && event.target === spritesList) {
                    if (event.clipboard.hasFormat(ClipboardFormats.FILE_LIST_FORMAT)) {
                        NativeDragManager.dropAction = NativeDragActions.LINK;
                        DragManager.acceptDragDrop(spritesList);
                    }
                }
            }
            
            protected function spritesListNativeDragDropHandler(event:NativeDragEvent):void
            {
                if (!this.clientLoaded) return;
                
                var clipboard:Clipboard = event.clipboard;
                if (clipboard.hasFormat(ClipboardFormats.FILE_LIST_FORMAT)) {
                    var dropfiles:Array = clipboard.getData(ClipboardFormats.FILE_LIST_FORMAT) as Array;
                    var length:uint = dropfiles.length;
                    
                    if (length > 1)
                        FileUtil.sortFiles(dropfiles, Array.NUMERIC | Array.DESCENDING);
                    
                    var list:Vector.<PathHelper> = new Vector.<PathHelper>();
                    for (var i:uint = 0; i < length; i++) {
                        var file:File = dropfiles[i];
                        if (FileUtil.hasBitmapFormat(file))
                            list[list.length] = new PathHelper(file.nativePath, i);
                    }
                    
                    if (list.length > 0)
                        sendCommand(new ImportSpritesFromFileCommand(list));
                }
            }
            
            protected function updateInitializedHandler(event:UpdateEvent):void
            {
                m_updater.checkNow();
            }
            
            protected function updateErrorHandler(event:ErrorEvent):void
            {
                Alert.show(event.text);
            }
            
            protected function versionStorageCompileHandler(event:StorageEvent):void
            {
                var file:File = File.applicationStorageDirectory.resolvePath("versions.xml");
                sendCommand(new LoadVersionsCommand(file));
            }
            
            protected function nativeMenuSelectedHandler(event:MenuEvent):void
            {
                switch(event.data)
                {
                    case Menu.FILE_NEW:
                        this.createNewProject();
                        break;
                    
                    case Menu.FILE_OPEN:
                        this.openProject();
                        break;
                    
                    case Menu.FILE_COMPILE:
                        this.compileProject();
                        break;
                    
                    case Menu.FILE_COMPILE_AS:
                        this.compileProjectAs();
                        break;
                    
                    case Menu.FILE_CLOSE:
                        this.unloadProject();
                        break;
                    
                    case Menu.FILE_PREFERENCES:
                        this.openPreferencesWindow();
                        break;
                    
                    case Menu.FILE_EXIT:
                        this.close();
                        break;
                    
                    case Menu.VIEW_SHOW_PREVIEW:
                        this.showPreviewPanel = !this.showPreviewPanel;
                        break;
                    
                    case Menu.VIEW_SHOW_OBJECTS:
                        this.showThingsPanel = !this.showThingsPanel;
                        break;
                    
                    case Menu.VIEW_SHOW_SPRITES:
                        this.showSpritesPanel = !this.showSpritesPanel;
                        break;
                    
                    case Menu.TOOLS_FIND:
                        this.openFinder();
                        break;
                    
                    case Menu.TOOLS_LOOK_TYPE_GENERATOR:
                        this.openLookGenerator();
                        break;
                    
                    case Menu.TOOLS_OBJECT_VIEWER:
                        this.openObjectViewer();
                        break;
                    
                    case Menu.TOOLS_SLICER:
                        this.openSlicer();
                        break;
                    
                    case Menu.TOOLS_ANIMATION_EDITOR:
                        this.openAnimationEditor();
                        break;
                    
                    case Menu.TOOLS_SPRITES_OPTIMIZER:
                        this.openSpritesOptimizer();
                        break;
                    
                    case Menu.WINDOW_LOG:
                        this.openLogWindow();
                        break;
                    
                    case Menu.WINDOW_VERSIONS:
                        this.openVersionsWindow();
                        break;
                    
                    case Menu.HELP_CONTENTS:
                        //this.openHelpWindow();
                        break;
                    
                    case Menu.HELP_CHECK_FOR_UPDATES:
                        this.checkForUpdates();
                        break;
                    
                    case Menu.HELP_ABOUT:
                        this.onAboutApplication();
                        break;
                }
            }
            
        ]]>
    </fx:Script>
    
    <s:menu>
        <menu:Menu id="nativeMenu"
                   selected="nativeMenuSelectedHandler(event)"/>
    </s:menu>
    
    <ob:Toolbar width="100%"
                height="35"/>
    
    <mx:HDividedBox width="100%"
                    height="100%"
                    top="35">
        
        <!-- info/view container -->
        <s:BorderContainer id="previewPanel"
                           minWidth="165"
                           maxWidth="280"
                           width="165"
                           height="100%"
                           fontSize="11"
                           skinClass="nail.components.skins.BorderContainerSkin">
            <s:layout>
                <s:VerticalLayout horizontalAlign="center"
                                  paddingRight="5"
                                  paddingLeft="5"
                                  paddingTop="5"
                                  paddingBottom="5"
                                  gap="5"/>
            </s:layout>
            
            <otlib:FilesInfoPanel id="infoPanel"
                                       width="100%"/>
            
            <nail:ShadowLine width="100%"/>
            
            <s:HGroup width="100%"
                      height="22">
                <s:DropDownList id="categoryDropDownList"
                                selectedIndex="0"
                                width="100%"
                                height="20"
                                change="categoryDropDownListChangeHandler(event)">
                    <s:dataProvider>
                        <s:ArrayList>
                            <fx:String>{resourceManager.getString('strings', 'item')}</fx:String>
                            <fx:String>{resourceManager.getString('strings', 'outfit')}</fx:String>
                            <fx:String>{resourceManager.getString('strings', 'effect')}</fx:String>
                            <fx:String>{resourceManager.getString('strings', 'missile')}</fx:String>
                        </s:ArrayList>
                    </s:dataProvider>
                </s:DropDownList>
                <s:ToggleButton id="showThingsPanelButton"
                                toolTip="@Resource(key='showObjectList', bundle='strings')"
                                width="20"
                                height="20"
                                selected="true"
                                icon="{Assets.SHOW_LIST_ICON}"
                                change="{showThingsPanel = showThingsPanelButton.selected;}"/>
            </s:HGroup>
            
            <nail:GroupBox id="thingViewGroup"
                           label="@Resource(key='preview', bundle='strings')"
                           width="100%"
                           height="100%"
                           nativeDragEnter="thingDataNativeDragEnterHandler(event)"
                           nativeDragDrop="thingDataNativeDragDropHandler(event)">
                <otlib:ThingDataView id="thingView"
                                     horizontalCenter="0"
                                     verticalCenter="0"/>
            </nail:GroupBox>
        </s:BorderContainer>
        
        <!-- thing list container -->
        <s:BorderContainer id="thingsPanel"
                           minWidth="190"
                           maxWidth="280"
                           width="190"
                           height="100%"
                           fontSize="11"
                           skinClass="nail.components.skins.BorderContainerSkin">
            <s:layout>
                <s:VerticalLayout horizontalAlign="center"
                                  paddingRight="5"
                                  paddingLeft="5"
                                  paddingTop="5"
                                  paddingBottom="5"
                                  gap="5"/>
            </s:layout>
            
            <nail:GroupBox id="objectListGroupBox"
                           label="@Resource(key='objects', bundle='strings')"
                           width="100%"
                           height="100%">
                <nail:layout>
                    <s:VerticalLayout paddingRight="0"
                                      paddingLeft="0"
                                      paddingTop="10"
                                      paddingBottom="0"/>
                </nail:layout>
                <otlib:ThingList id="thingList"
                                      width="100%"
                                      height="100%"
                                      fontSize="11"
                                      borderAlpha="0"
                                      horizontalScrollPolicy="off"
                                      doubleClickEnabled="true"
                                      allowMultipleSelection="true"
                                      requireSelection="true"
                                      replace="replaceThingHandler(event)"
                                      export="exportThingHandler(event)"
                                      duplicate="duplicateThingHandler(event)"
                                      edit="editThingHandler(event)"
                                      remove="removeThingHandler(event)"
                                      doubleClick="thingListDoubleClickHandler(event)"
                                      change="thingListChangeHandler(event)"
                                      nativeDragEnter="thingDataNativeDragEnterHandler(event)"
                                      nativeDragDrop="thingDataNativeDragDropHandler(event)"/>
            </nail:GroupBox>
            
            <otlib:AmountNumericStepper id="thingStepper"
                                        width="100%"
                                        value="{thingList.selectedId}"
                                        change="thingStepperChangeHandler(event)"/>
            <s:HGroup width="100%"
                      horizontalAlign="center"
                      verticalAlign="middle"
                      gap="3">
                <s:Button id="replaceThingButton"
                          toolTip="@Resource(key='replace', bundle='strings')"
                          width="19"
                          height="19"
                          icon="{Assets.REPLACE}"
                          click="replaceThingHandler(event)"/>
                <s:Button id="importThingButton"
                          toolTip="@Resource(key='import', bundle='strings')"
                          width="19"
                          height="19"
                          icon="{Assets.IMPORT}"
                          click="importThingHandler(event)"/>
                <s:Button id="exportThingButton"
                          toolTip="@Resource(key='export', bundle='strings')"
                          width="19"
                          height="19"
                          icon="{Assets.EXPORT}"
                          click="exportThingHandler(event)"/>
                <s:Button id="editThingButton"
                          toolTip="@Resource(key='edit', bundle='strings')"
                          width="19"
                          height="19"
                          icon="{Assets.EDIT}"
                          click="editThingHandler(event)"/>
                <s:Button id="duplicateThingButton"
                          toolTip="@Resource(key='duplicate', bundle='strings')"
                          width="19"
                          height="19"
                          icon="{Assets.DUPLICATE}"
                          click="duplicateThingHandler(event)"/>
                <s:Button id="newThingButton"
                          toolTip="@Resource(key='new', bundle='strings')"
                          width="19"
                          height="19"
                          icon="{Assets.NEW}"
                          click="newThingHandler(event)"/>
                <s:Button id="removeThingButton"
                          toolTip="@Resource(key='remove', bundle='strings')"
                          width="19"
                          height="19"
                          icon="{Assets.DELETE}"
                          click="removeThingHandler(event)"/>
            </s:HGroup>
        </s:BorderContainer>
        
        <!-- ThingType editor -->
        <s:Group minWidth="310"
                 width="100%"
                 height="100%">
            <s:layout>
                <s:VerticalLayout gap="-1"/>
            </s:layout>
            
            <s:BorderContainer width="100%"
                               height="100%"
                               skinClass="nail.components.skins.BorderContainerSkin">
                <otlib:ThingTypeEditor id="thingTypeEditor"
                                       width="100%"
                                       height="100%"
                                       visible="false"
                                       thingChange="thingChangedHandler(event)"
                                       thingPropertyChange="thingPropertyChangedHandler(event)"
                                       spriteDoubleClick="thingSpriteDoubleClickHandler(event)"
                                       nativeDragEnter="thingEditorDragEnterHandler(event)"
                                       nativeDragDrop="thingEditorDragDropHandler(event)"/>
            </s:BorderContainer>
            
            <s:BorderContainer width="100%"
                               backgroundColor="0x535353"
                               borderColor="0x272727">
                <s:layout>
                    <s:HorizontalLayout horizontalAlign="right"
                                        verticalAlign="middle"
                                        paddingLeft="10"
                                        paddingRight="10"
                                        paddingTop="3"
                                        paddingBottom="3"/>
                </s:layout>
                <s:Button id="confirmButton"
                          label="@Resource(key='save', bundle='strings')"
                          fontSize="11"
                          height="20"
                          enabled="false"
                          click="confirmButtonClickHandler(event)"/>
                <s:Button id="cancelButton"
                          label="@Resource(key='close', bundle='strings')" 
                          fontSize="11"
                          height="20"
                          enabled="false"
                          click="cancelButtonClickHandler(event)"/>
            </s:BorderContainer>
        </s:Group>
        
        <!-- sprites container -->
        <s:BorderContainer id="spritesPanel"
                           minWidth="190"
                           maxWidth="250"
                           width="190"
                           height="100%"
                           skinClass="nail.components.skins.BorderContainerSkin">
            <s:layout>
                <s:VerticalLayout horizontalAlign="center"
                                  paddingRight="5"
                                  paddingLeft="5"
                                  paddingTop="5"
                                  paddingBottom="5"
                                  gap="5"/>
            </s:layout>	
            
            <nail:GroupBox label="@Resource(key='sprites', bundle='strings')"
                           width="100%"
                           height="100%">
                <nail:layout>
                    <s:VerticalLayout paddingRight="0"
                                      paddingLeft="0"
                                      paddingTop="10"
                                      paddingBottom="0"/>
                </nail:layout>
                
                <otlib:SpriteList id="spritesList"
                                       width="100%"
                                       height="100%"
                                       allowMultipleSelection="true"
                                       dragEnabled="true"
                                       fontSize="11"
                                       borderAlpha="0"
                                       requireSelection="true"
                                       change="spritesListChangeHandler(event)"
                                       copy="onCopySprite()"
                                       paste="onPasteSprite()"
                                       replace="replaceSpriteHandler(event)"
                                       export="exportSpriteHandler(event)"
                                       remove="removeSpriteHandler(event)"
                                       nativeDragEnter="spritesListNativeDragEnterHandler(event)"
                                       nativeDragDrop="spritesListNativeDragDropHandler(event)"/>
            </nail:GroupBox>
            
            <otlib:AmountNumericStepper id="spriteStepper"
                                        width="100%"
                                        value="{spritesList.selectedId}"
                                        change="spriteStepperChangeHandler(event)"/>
            
            <s:HGroup width="100%"
                      horizontalAlign="center"
                      verticalAlign="middle"
                      gap="3">
                <s:Button id="replaceSpriteButton"
                          toolTip="@Resource(key='replace', bundle='strings')"
                          width="19"
                          height="19"
                          icon="{Assets.REPLACE}"
                          click="replaceSpriteHandler(event)"/>
                <s:Button id="importSpriteButton"
                          toolTip="@Resource(key='import', bundle='strings')"
                          width="19"
                          height="19"
                          icon="{Assets.IMPORT}"
                          click="importSpriteHandler(event)"/>
                <s:Button id="exportSpriteButton"
                          toolTip="@Resource(key='export', bundle='strings')"
                          width="19"
                          height="19"
                          icon="{Assets.EXPORT}"
                          click="exportSpriteHandler(event)"/>
                <s:Button id="copySpriteButton"
                          toolTip="@Resource(key='copy', bundle='strings')"
                          width="19"
                          height="19"
                          icon="{Assets.MINI_COPY}"
                          click="onCopySprite()"/>
                <s:Button id="pasteSpriteButton"
                          toolTip="@Resource(key='paste', bundle='strings')"
                          width="19"
                          height="19"
                          icon="{Assets.MINI_PASTE}"
                          click="onPasteSprite()"/>
                <s:Button id="newSpriteButton"
                          toolTip="@Resource(key='new', bundle='strings')"
                          width="19"
                          height="19"
                          icon="{Assets.NEW}"
                          click="newSpriteButtonClickHandler(event)"/>
                <s:Button id="removeSpriteButton"
                          toolTip="@Resource(key='remove', bundle='strings')"
                          width="19"
                          height="19"
                          icon="{Assets.DELETE}"
                          click="removeSpriteHandler(event)"/>
            </s:HGroup>
        </s:BorderContainer>
    </mx:HDividedBox>
</s:WindowedApplication>
