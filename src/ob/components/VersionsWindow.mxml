<?xml version="1.0" encoding="utf-8"?>
<!--
Copyright (c) 2015 Object Builder <https://github.com/Mignari/ObjectBuilder>

Permission is hereby granted, free of charge, to any person obtaining a copy
of this software and associated documentation files (the "Software"), to deal
in the Software without restriction, including without limitation the rights
to use, copy, modify, merge, publish, distribute, sublicense, and/or sell
copies of the Software, and to permit persons to whom the Software is
furnished to do so, subject to the following conditions:

The above copyright notice and this permission notice shall be included in
all copies or substantial portions of the Software.

THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR
IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,
FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE
AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER
LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,
OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN
THE SOFTWARE.
-->

<s:Window xmlns:fx="http://ns.adobe.com/mxml/2009"
          xmlns:s="library://ns.adobe.com/flex/spark"
          xmlns:mx="library://ns.adobe.com/flex/mx"
          xmlns:nail="library://ns.nail.com/naillib"
          minWidth="600"
          minHeight="500"
          backgroundColor="0x494949"
          showStatusBar="false"
          fontSize="11"
          title="@Resource(key='versions', bundle='strings')"
          creationComplete="creationCompleteHandler(event)"
          closing="closingHandler(event)">
    
    <fx:Script>
        <![CDATA[
            import mx.collections.ArrayCollection;
            import mx.events.CloseEvent;
            import mx.events.FlexEvent;
            
            import spark.events.GridSelectionEvent;
            import spark.events.TextOperationEvent;
            
            import nail.components.controls.Alert;
            import nail.utils.StringUtil;
            
            import otlib.assets.Assets;
            import otlib.core.IVersionStorage;
            import otlib.core.Version;
            import otlib.core.VersionStorage;
            
            //--------------------------------------------------------------------------
            // PROPERTIES
            //--------------------------------------------------------------------------
            
            private var m_versionStorage:IVersionStorage;
            private var m_value:uint;
            private var m_datSignature:uint;
            private var m_sprSignature:uint;
            private var m_otbversion:uint;
            
            //--------------------------------------------------------------------------
            // METHODS
            //--------------------------------------------------------------------------
            
            //--------------------------------------
            // Private
            //--------------------------------------
            
            private function updateVersions():void
            {
                versionsDataGrid.dataProvider = new ArrayCollection(m_versionStorage.getList());
                versionsDataGrid.selectedIndex = -1;
            }
            
            private function checkVersion():void
            {
                m_value = uint(valueTextInput.text);
                m_datSignature = uint("0x" + datTextInput.text);
                m_sprSignature = uint("0x" + sprTextInput.text);
                m_otbversion = uint(otbTextInput.text);
                
                addVersionButton.enabled = false;
                removeVersionButton.enabled = false;
                
                var version:Version = m_versionStorage.getBySignatures(m_datSignature, m_sprSignature);
                if (version)
                    removeVersionButton.enabled = (version.value == m_value);
                else
                    addVersionButton.enabled = (m_value >= Version.MIN_VERSION && m_value <= Version.MAX_VERSION);
            }
            
            //--------------------------------------
            // Event Handlers
            //--------------------------------------
            
            protected function creationCompleteHandler(event:FlexEvent):void
            {
                m_versionStorage = VersionStorage.getInstance();
                m_versionStorage.addEventListener(Event.CHANGE, storageChangeHandler);
                updateVersions();
            }
            
            protected function closingHandler(event:Event):void
            {
                m_versionStorage.removeEventListener(Event.CHANGE, storageChangeHandler);
            }
            
            protected function addVersionButtonClickHandler(event:MouseEvent):void
            {
                m_versionStorage.addVersion(Version.create(m_value, m_datSignature, m_sprSignature, m_otbversion));
            }
            
            protected function removeVersionButtonClickHandler(event:MouseEvent):void
            {
                var version:Version = Version(versionsDataGrid.selectedItem);
                if (!version) return;
                
                var message:String = StringUtil.format(resourceManager.getString("strings", "wantToRemove"),
                                                       resourceManager.getString("strings", "version").toLowerCase(),
                                                       version);
                
                Alert.show(message,
                           resourceManager.getString("strings", "remove"),
                           Alert.YES | Alert.NO,
                           this,
                           closeHandler,
                           null,
                           Alert.NO);
                
                function closeHandler(event:CloseEvent):void
                {
                    if (event.detail == Alert.YES)
                        m_versionStorage.removeVersion(version);
                }
            }
            
            protected function versionsDataGridSelectionChangeHandler(event:GridSelectionEvent):void
            {
                var version:Version = Version(versionsDataGrid.selectedItem);
                if (version) {
                    valueTextInput.text = version.value.toString();
                    datTextInput.text = version.datSignature.toString(16).toUpperCase();
                    sprTextInput.text = version.sprSignature.toString(16).toUpperCase();
                    otbTextInput.text = version.otbVersion.toString();
                    removeVersionButton.enabled = true;
                }
                checkVersion();
            }
            
            protected function storageChangeHandler(event:Event):void
            {
                updateVersions();
                m_versionStorage.save();
            }
            
            protected function openVersionXMLButtonClickHandler(event:MouseEvent):void
            {
                if (m_versionStorage.file)
                    m_versionStorage.file.openWithDefaultApplication();
            }
            
        ]]>
    </fx:Script>
    
    <s:layout>
        <s:VerticalLayout paddingLeft="10"
                          paddingRight="10"
                          paddingTop="10"
                          paddingBottom="10"/>
    </s:layout>
    
    <s:DataGrid id="versionsDataGrid"
                width="100%"
                height="100%"
                selectionChange="versionsDataGridSelectionChangeHandler(event)">
        
        <s:columns>
            <s:ArrayList>
                <s:GridColumn dataField="value" headerText="@Resource(key='value', bundle='strings')"/>
                <s:GridColumn dataField="description" headerText="String"/>
                <s:GridColumn dataField="datSignature" headerText="Dat"
                              itemRenderer="ob.components.renders.SignatureItemRenderer"/>
                <s:GridColumn dataField="sprSignature" headerText="Spr"
                              itemRenderer="ob.components.renders.SignatureItemRenderer"/>
                <s:GridColumn dataField="otbVersion" headerText="Otb"/>
            </s:ArrayList>
        </s:columns>
    </s:DataGrid>
    
    <nail:ShadowLine width="100%"/>
    
    <s:HGroup width="100%"
              horizontalAlign="left"
              verticalAlign="middle">
        
        <s:Button id="addVersionButton"
                  toolTip="@Resource(key='addVersion', bundle='strings')"
                  width="19"
                  height="19"
                  icon="{Assets.NEW}"
                  enabled="false"
                  click="addVersionButtonClickHandler(event)"/>
        
        <s:Button id="removeVersionButton"
                  toolTip="@Resource(key='remove', bundle='strings')"
                  width="19"
                  height="19"
                  icon="{Assets.DELETE}"
                  enabled="false"
                  click="removeVersionButtonClickHandler(event)"/>
        
        <nail:ShadowLine height="100%"/>
        
        <s:Label text="{resourceManager.getString('strings', 'value') + ':'}"/>
        
        <s:TextInput id="valueTextInput"
                     width="80"
                     maxChars="4"
                     restrict="0-9"
                     change="checkVersion()"/>
        
        <nail:ShadowLine height="100%"/>
        
        <s:Label text="Dat:"/>
        
        <s:TextInput id="datTextInput"
                     width="80"
                     maxChars="8"
                     restrict="0-9 A-F a-f"
                     change="checkVersion()"/>
        
        <nail:ShadowLine height="100%"/>
        
        <s:Label text="Spr:"/>
        
        <s:TextInput id="sprTextInput"
                     width="80"
                     maxChars="8"
                     restrict="0-9 A-F a-f"
                     change="checkVersion()"/>
        
        <nail:ShadowLine height="100%"/>
        
        <s:Label text="Otb:"/>
        
        <s:TextInput id="otbTextInput"
                     width="80"
                     maxChars="3"
                     restrict="0-9"
                     change="checkVersion()"/>
    </s:HGroup>
    
    <nail:ShadowLine width="100%"/>
    
    <s:HGroup width="100%"
              horizontalAlign="right"
              verticalAlign="middle">
        
        <s:Button label="@Resource(key='openVersionsFile', bundle='strings')"
                  minWidth="70"
                  click="openVersionXMLButtonClickHandler(event)"/>
        
        <s:Button label="@Resource(key='close', bundle='strings')"
                  minWidth="70"
                  click="close()"/>
    </s:HGroup>
</s:Window>
