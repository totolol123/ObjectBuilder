<?xml version="1.0" encoding="utf-8"?>
<!--
Copyright (c) 2015 Object Builder <https://github.com/Mignari/ObjectBuilder>

Permission is hereby granted, free of charge, to any person obtaining a copy
of this software and associated documentation files (the "Software"), to deal
in the Software without restriction, including without limitation the rights
to use, copy, modify, merge, publish, distribute, sublicense, and/or sell
copies of the Software, and to permit persons to whom the Software is
furnished to do so, subject to the following conditions:

The above copyright notice and this permission notice shall be included in
all copies or substantial portions of the Software.

THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR
IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,
FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE
AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER
LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,
OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN
THE SOFTWARE.
-->

<s:Window xmlns:fx="http://ns.adobe.com/mxml/2009"
          xmlns:s="library://ns.adobe.com/flex/spark"
          xmlns:mx="library://ns.adobe.com/flex/mx"
          xmlns:nail="library://ns.nail.com/naillib"
          xmlns:otlib="otlib.components.*"
          showStatusBar="false"
          backgroundColor="0x494949"
          width="400"
          height="270"
          resizable="false"
          fontSize="11"
          type="utility"
          title="@Resource(key='export', bundle='strings')"
          preinitialize="preinitializeHandler(event)"
          creationComplete="creationCompleteHandler(event)"
          closing="closingHandler(event)">
    
    <fx:Metadata>
        [ResourceBundle("strings")]
    </fx:Metadata>
    
    <fx:Script>
        <![CDATA[
            import mx.collections.ArrayCollection;
            import mx.events.FlexEvent;
            
            import spark.events.IndexChangeEvent;
            import spark.events.TextOperationEvent;
            
            import nail.image.ImageFormat;
            import nail.utils.DialogDetail;
            import nail.utils.isNullOrEmpty;
            
            import otlib.core.Version;
            import otlib.core.VersionStorage;
            import otlib.events.FileTextInputEvent;
            import otlib.obd.OBDVersions;
            import otlib.utils.OTFormat;
            
            //--------------------------------------------------------------------------
            // PROPERTIES
            //--------------------------------------------------------------------------
            
            private var m_versions:ArrayCollection;
            private var m_formats:ArrayCollection;
            private var m_prefix:String;
            private var m_prefixChanged:Boolean;
            private var m_directory:File;
            private var m_directoryChanged:Boolean;
            private var m_format:String;
            private var m_formatChanged:Boolean;
            private var m_obdFormatEnabled:Boolean = true;
            private var m_obdFormatEnabledChanged:Boolean;
            private var m_clientVersion:Version;
            private var m_clientVersionChanged:Boolean;
            private var m_obdVersion:uint = OBDVersions.OBD_VERSION_2;
            private var m_obdVersionChanged:Boolean;
            private var m_transparentBackground:Boolean = true;
            private var m_transparentBackgroundChanged:Boolean;
            private var m_jpegQuality:uint = 100;
            private var m_jpegQualityChanged:Boolean;
            private var m_detail:uint;
            
            //--------------------------------------
            // Getters / Setters 
            //--------------------------------------
            
            public function get prefix():String { return m_prefix; }
            public function set prefix(value:String):void
            {
                if (m_prefix != value) {
                    m_prefix = value;
                    m_prefixChanged = true;
                    invalidateProperties();
                }
            }
            
            public function get directory():File { return m_directory; }
            public function set directory(value:File):void
            {
                if (m_directory != value) {
                    m_directory = value;
                    m_directoryChanged = true;
                    invalidateProperties();
                }
            }
            
            public function get format():String { return m_format; }
            public function set format(value:String):void
            {
                if (!isNullOrEmpty(value)) {
                    if (!m_obdFormatEnabled && value == OTFormat.OBD)
                        value = ImageFormat.PNG;
                    
                    value = value.toLowerCase();
                }
                
                if (m_format != value) {
                    m_format = value;
                    m_formatChanged = true;
                    invalidateProperties();
                }
            }
            
            public function get obdFormatEnabled():Boolean { return m_obdFormatEnabled; }
            public function set obdFormatEnabled(value:Boolean):void
            {
                if (m_obdFormatEnabled != value) {
                    m_obdFormatEnabled = value;
                    m_obdFormatEnabledChanged = true;
                    invalidateProperties();
                }
            }
            
            public function get clientVersion():Version { return m_clientVersion; }
            public function set clientVersion(value:Version):void
            {
                if (m_clientVersion != value) {
                    m_clientVersion = value;
                    m_clientVersionChanged = true;
                    invalidateProperties();
                }
            }
            
            public function get obdVersion():uint { return m_obdVersion; }
            public function set obdVersion(value:uint):void
            {
                if (m_obdVersion != value) {
                    m_obdVersion = value;
                    m_obdVersionChanged = true;
                    invalidateProperties();
                }
            }
            
            public function get transparentBackground():Boolean { return m_transparentBackground; }
            public function set transparentBackground(value:Boolean):void
            {
                if (m_transparentBackground != value) {
                    m_transparentBackground = value;
                    m_transparentBackgroundChanged = true;
                    invalidateProperties();
                }
            }
            
            public function get jpegQuality():uint { return m_jpegQuality; }
            public function set jpegQuality(value:uint):void
            {
                value = value > 100 ? 100 : value;
                if (m_jpegQuality != value) {
                    m_jpegQuality = value;
                    m_jpegQualityChanged = true;
                    invalidateProperties();
                }
            }
            
            public function get detail():uint { return m_detail; }
            
            //--------------------------------------------------------------------------
            // METHODS
            //--------------------------------------------------------------------------
            
            //--------------------------------------
            // Override Protected
            //--------------------------------------
            
            override protected function commitProperties():void
            {
                super.commitProperties();
                
                if (m_prefixChanged) {
                    prefixTextInput.text = m_prefix;
                    m_prefixChanged = false;
                    check();
                }
                
                if (m_directoryChanged) {
                    directoryTextInput.file = m_directory;
                    m_directoryChanged = false;
                    check();
                }
                
                if (m_formatChanged) {
                    var formatIndex:int = getFormatIndex(m_format);
                    formatList.selectedIndex = formatIndex;
                    stackView.selectedIndex = m_obdFormatEnabled ? formatIndex : formatIndex + 1;
                    m_formatChanged = false;
                    check();
                }
                
                if (m_obdFormatEnabledChanged) {
                    m_obdFormatEnabledChanged = false;
                    check();
                }
                
                if (m_clientVersionChanged) {
                    clientVersionsDropDownList.selectedIndex = m_versions.getItemIndex(m_clientVersion);
                    m_clientVersionChanged = false;
                    check();
                }
                
                if (m_obdVersionChanged) {
                    if (m_obdVersion == OBDVersions.OBD_VERSION_2) 
                        obdVersionDropDownList.selectedIndex = 0;
                    else if (m_obdVersion == OBDVersions.OBD_VERSION_1)
                        obdVersionDropDownList.selectedIndex = 1;
                    
                    m_obdVersionChanged = false;
                }
                
                if (m_transparentBackgroundChanged) {
                    transparentBackgroundCheckBox.selected = m_transparentBackground;
                    m_transparentBackgroundChanged = false;
                }
                
                if (m_jpegQualityChanged) {
                    jpegQualityHSlider.value = m_jpegQuality;
                    m_jpegQualityChanged = false;
                }
            }
            
            //--------------------------------------
            // Public
            //--------------------------------------
            
            private function getFormatIndex(format:String):int
            {
                if (!isNullOrEmpty(format)) {
                    for (var i:uint = 0; i < m_formats.length; i++) {
                        if (m_formats.getItemAt(i).format == format)
                            return i;
                    }
                }
                return -1;
            }
            
            private function getVersionIndex(version:Version):int
            {
                if (m_versions && version)
                    return m_versions.getItemIndex(version);
                
                return -1;
            }
            
            private function check():void
            {
                confirmButton.enabled = (!isNullOrEmpty(m_prefix) && m_directory);
            }
            
            //--------------------------------------
            // Event Handlers
            //--------------------------------------
            
            protected function preinitializeHandler(event:FlexEvent):void
            {
                m_formats = new ArrayCollection([{label:"PNG - Portable Network Graphics", format:ImageFormat.PNG},
                                                 {label:"BMP - Windows Bitmap", format:ImageFormat.BMP},
                                                 {label:"JPG - Bitmaps JPEG", format:ImageFormat.JPG}]);
                
                m_versions = new ArrayCollection( VersionStorage.getInstance().getList() );
            }
            
            protected function creationCompleteHandler(event:FlexEvent):void
            {
                if (m_obdFormatEnabled)
                    m_formats.addItemAt({label:"OBD - Object Builder Data", format:OTFormat.OBD}, 0);
                
                var formatIndex:int = getFormatIndex(m_format);
                
                clientVersionsDropDownList.dataProvider = m_versions;
                formatList.dataProvider = m_formats;
                formatList.selectedIndex = formatIndex
                prefixTextInput.text = m_prefix;
                directoryTextInput.text = m_directory ? m_directory.nativePath : "";
                clientVersionsDropDownList.selectedIndex = getVersionIndex(m_clientVersion);
                stackView.selectedIndex = m_obdFormatEnabled ? formatIndex : formatIndex + 1;
                focusManager.setFocus(cancelButton);
                focusManager.showFocus();
            }
            
            protected function closingHandler(event:Event):void
            {
                if (m_detail == DialogDetail.CANCEL) {
                    m_prefix = null;
                    m_directory = null;
                    m_clientVersion = null;
                }
            }
            
            protected function nameTextInputChangeHandler(event:TextOperationEvent):void
            {
                this.prefix = prefixTextInput.text;
            }
            
            protected function directoryChangeHandler(event:FileTextInputEvent):void
            {
                this.directory = event.file;
            }
            
            protected function browseButtonClickHandler(event:MouseEvent):void
            {
                var path:String = m_directory ? m_directory.nativePath : File.documentsDirectory.nativePath;
                var dir:File = new File(path);
                dir.addEventListener(Event.SELECT, fileSelectHandler);
                dir.browseForDirectory(resourceManager.getString("strings", "selectFolder"));
                
                function fileSelectHandler(event:Event):void
                {
                    directory = dir;
                }
            }
            
            protected function formatListChangeHandler(event:IndexChangeEvent):void
            {
                this.format = formatList.selectedItem.format;
            }
            
            protected function versionDropDownListChangeHandler(event:IndexChangeEvent):void
            {
                this.clientVersion = clientVersionsDropDownList.selectedItem as Version;
            }
            
            protected function obdVersionDropDownListChangeHandler(event:IndexChangeEvent):void
            {
                if (obdVersionDropDownList.selectedIndex == 0)
                    this.obdVersion = OBDVersions.OBD_VERSION_2;
                else if (obdVersionDropDownList.selectedIndex == 1)
                    this.obdVersion = OBDVersions.OBD_VERSION_1;
            }
            
            protected function transparentBackgroundCheckBoxChangeHandler(event:Event):void
            {
                this.transparentBackground = transparentBackgroundCheckBox.selected;
            }
            
            protected function jpegQualityHSliderChangeHandler(event:Event):void
            {
                this.jpegQuality = jpegQualityHSlider.value;
            }
            
            protected function confirmButtonClickHandler(event:MouseEvent):void
            {
                m_detail = DialogDetail.CONFIRM;
                this.close();
            }
            
            protected function cancelButtonClickHandler(event:MouseEvent):void
            {
                m_detail = DialogDetail.CANCEL;
                this.close();
            }
            
        ]]>
    </fx:Script>
    
    <s:layout>
        <s:VerticalLayout gap="10"
                          paddingLeft="10"
                          paddingRight="10"
                          paddingTop="10"
                          paddingBottom="10"
                          horizontalAlign="right"/>
    </s:layout>
    
    <s:Group width="100%">
        
        <s:Label text="{resourceManager.getString('strings', 'prefix') + ':'}"/>
        
        <s:TextInput id="prefixTextInput"
                     left="0"
                     right="0"
                     top="15"
                     change="nameTextInputChangeHandler(event)"/>
    </s:Group>
    
    <s:Group width="100%">
        
        <s:Label text="{resourceManager.getString('strings', 'outputFolder') + ':'}"/>
        
        <s:HGroup width="100%"
                  verticalAlign="middle"
                  top="15">
            <otlib:FileTextInput id="directoryTextInput"
                                 width="100%"
                                 fileChange="directoryChangeHandler(event)"/>
            
            <s:Button id="browseButton"
                      label="@Resource(key='browse', bundle='strings')"
                      minWidth="60"
                      click="browseButtonClickHandler(event)"/>
        </s:HGroup>
    </s:Group>
    
    <nail:GroupBox label="@Resource(key='format', bundle='strings')"
                   width="100%">
        <nail:layout>
            <s:VerticalLayout gap="10"
                              paddingLeft="10"
                              paddingRight="10"
                              paddingTop="10"
                              paddingBottom="10"/>
        </nail:layout>
        
        <s:DropDownList id="formatList"
                        width="100%"
                        requireSelection="true"
                        change="formatListChangeHandler(event)"/>
    </nail:GroupBox>
    
    <nail:GroupBox label="@Resource(key='options', bundle='strings')"
                   width="100%">
        
        <mx:ViewStack id="stackView"
                      width="100%"
                      creationPolicy="all">
            
            <!-- OBD options -->
            <s:NavigatorContent>
                <s:layout>
                    <s:HorizontalLayout gap="20"
                                        paddingLeft="10"
                                        paddingRight="10"
                                        paddingTop="10"
                                        paddingBottom="10"
                                        verticalAlign="middle"/>
                </s:layout>
                
                <s:Label text="{resourceManager.getString('strings', 'version') + ':'}"/>
                <s:DropDownList id="clientVersionsDropDownList"
                                width="100%"
                                requireSelection="true"
                                change="versionDropDownListChangeHandler(event)"/>
                
                <s:Label text="OBD:"/>
                <s:DropDownList id="obdVersionDropDownList"
                                width="100%"
                                requireSelection="true"
                                change="obdVersionDropDownListChangeHandler(event)">
                    <s:dataProvider>
                        <s:ArrayList>
                            <fx:String>2</fx:String>
                            <fx:String>1</fx:String>
                        </s:ArrayList>
                    </s:dataProvider>
                </s:DropDownList>
            </s:NavigatorContent>
            
            <!-- PNG options -->
            <s:NavigatorContent>
                <s:layout>
                    <s:HorizontalLayout gap="20"
                                        paddingLeft="10"
                                        paddingRight="10"
                                        paddingTop="10"
                                        paddingBottom="10"
                                        verticalAlign="middle"/>
                </s:layout>
                
                <s:CheckBox id="transparentBackgroundCheckBox"
                            label="@Resource(key='transparentBackground', bundle='strings')"
                            selected="true"
                            change="transparentBackgroundCheckBoxChangeHandler(event)"/>
            </s:NavigatorContent>
            
            <!-- BMP options -->
            <s:NavigatorContent/>
            
            <!-- JPG options -->
            <s:NavigatorContent>
                <s:layout>
                    <s:HorizontalLayout gap="20"
                                        paddingLeft="10"
                                        paddingRight="10"
                                        paddingTop="10"
                                        paddingBottom="10"
                                        verticalAlign="middle"/>
                </s:layout>
                
                <s:Label text="{resourceManager.getString('strings', 'quality') + ':'}"/>
                
                <s:HSlider id="jpegQualityHSlider"
                           width="120"
                           minimum="10"
                           maximum="100"
                           stepSize="5"
                           value="100"
                           change="jpegQualityHSliderChangeHandler(event)"/>
                
                <s:Label text="{jpegQualityHSlider.value + ' %'}"/>
                
            </s:NavigatorContent>
        </mx:ViewStack>
    </nail:GroupBox>
    
    <nail:ShadowLine width="100%"/>
    
    <s:HGroup width="100%"
              verticalAlign="middle"
              horizontalAlign="right">
        
        <s:Button id="confirmButton"
                  label="@Resource(key='confirm', bundle='strings')"
                  minWidth="70"
                  enabled="false"
                  click="confirmButtonClickHandler(event)"/>
        
        <s:Button id="cancelButton"
                  label="@Resource(key='cancel', bundle='strings')"
                  minWidth="70"
                  click="cancelButtonClickHandler(event)"/>
    </s:HGroup>
</s:Window>
